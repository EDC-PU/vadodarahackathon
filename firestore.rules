rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isSpocForTeam(teamId) {
      let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return user.role == 'spoc' && user.institute == team.institute;
    }
    
    function isTeamLeader(teamId) {
      let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
      return isOwner(team.leader.uid);
    }
    
    function isTeamMember(teamId) {
      let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
      return team.members.exists(member => member.uid == request.auth.uid);
    }
    
    function isTeamLeaderOrMember(teamId) {
        return isTeamLeader(teamId) || isTeamMember(teamId);
    }

    // Collection Rules

    match /users/{userId} {
      // Admins can do anything.
      allow read, write, delete: if isAdmin();
      
      // Allow users to read and update their own profile.
      allow get, update: if isOwner(userId);
      
      // Allow any authenticated user to create their own user document during signup.
      allow create: if request.auth != null;
      
      // Allow authenticated users to list other users ONLY for the purpose of checking if a SPOC exists for an institute.
      // This is required for the Complete SPOC Profile form.
      allow list: if request.auth != null && request.query.resource.data.role == 'spoc' && request.query.keys.size() == 2 && 'role' in request.query.keys && 'institute' in request.query.keys;
    }

    match /teams/{teamId} {
      allow read: if isTeamLeaderOrMember(teamId) || isSpocForTeam(teamId) || isAdmin();
      allow create: if request.auth != null; // Further checks in Cloud Function
      allow update: if isTeamLeader(teamId) || isAdmin();
      allow delete: if isTeamLeader(teamId) || isSpocForTeam(teamId) || isAdmin();
    }
    
    match /teamInvites/{inviteId} {
        // Anyone with the link can read it to get team info.
        allow get: if true;
        // Leaders can create invites (done via flow), admins can manage.
        allow write: if isAdmin() || exists(/databases/$(database)/documents/teams/$(request.resource.data.teamId)) && isTeamLeader(request.resource.data.teamId);
    }

    match /problemStatements/{psId} {
        // Anyone can read problem statements.
        allow read: if true;
        // Only admins can create, update, or delete them.
        allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
        // Anyone can read announcements.
        allow get, list: if true;
        // Only admins can create or delete them.
        allow write, delete: if isAdmin();
    }
    
    match /config/{docId} {
        // Anyone can read config like registration deadlines.
        allow get: if true;
        // Only admins can change settings.
        allow write: if isAdmin();
    }
    
    match /healthchecks/{docId} {
        // Only allow access for the system health check flow.
        allow write, delete, get: if isAdmin();
    }
    
    match /notifications/{notificationId} {
        // Users can only read, update (e.g., mark as read), or delete their own notifications.
        allow read, update, delete: if isOwner(get(/databases/$(database)/documents/notifications/$(notificationId)).data.recipientUid);
        // Any authenticated user can create a notification (e.g., a member joining creates one for the leader).
        allow create: if request.auth != null;
    }
  }
}
