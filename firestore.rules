
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =======================
    // Helper Functions
    // =======================

    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function getRequestingUserData() {
      return getUserData(request.auth.uid);
    }

    function isAdmin() {
      return isSignedIn() && getRequestingUserData().role == 'admin';
    }
    
    function isApprovedSpoc() {
        return isSignedIn() && getRequestingUserData().role == 'spoc' && getRequestingUserData().spocStatus == 'approved';
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isTeamLeader(teamId) {
      return isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.leader.uid == request.auth.uid;
    }
    
    function isTeamMember(teamId) {
       return isSignedIn() && getRequestingUserData().teamId == teamId;
    }

    function isInstituteSpocForTeam(teamId) {
      let teamData = get(/databases/$(database)/documents/teams/$(teamId)).data;
      let userData = getRequestingUserData();
      return isApprovedSpoc() && userData.institute == teamData.institute;
    }
    
    function isSpocForUser(userId) {
        let userData = getUserData(userId);
        let spocData = getRequestingUserData();
        return isApprovedSpoc() && spocData.institute == userData.institute;
    }

    // =======================
    // Collection Rules
    // =======================

    match /users/{userId} {
      // READ: Admins and the user themselves can read a profile.
      allow read: if isAdmin() || isOwner(userId);
      
      // WRITE: Admins and the user themselves can update a profile.
      // A SPOC can also update a user's profile IF that user belongs to their institute (e.g., to remove them from a team).
      allow write: if isAdmin() || isOwner(userId) || isSpocForUser(userId);

      // LIST: Allow a signed-in user to query the users collection ONLY IF they are specifically
      // checking for an existing approved SPOC in an institute. This is for the SPOC registration form check.
      allow list: if isSignedIn() && request.query.get('role') == 'spoc' && request.query.get('spocStatus') == 'approved';
    }

    match /teams/{teamId} {
      // READ: Admins, team members, and the institute's SPOC can read team data.
      allow read: if isAdmin() || isTeamMember(teamId) || isInstituteSpocForTeam(teamId);

      // CREATE: Any authenticated user can create a team (flow logic handles role assignment).
      allow create: if isSignedIn();

      // UPDATE: Admins, the team leader, or the institute's SPOC can update a team.
      allow update: if isAdmin() || isTeamLeader(teamId) || isInstituteSpocForTeam(teamId);

      // DELETE: Admins or the institute's SPOC can delete a team.
      allow delete: if isAdmin() || isInstituteSpocForTeam(teamId);
    }
    
    match /teamInvites/{inviteId} {
      // READ: Any signed-in user can read an invite (to get details from a link).
      allow read: if isSignedIn();
      
      // WRITE: The team leader or an admin can create/modify an invite.
      allow write: if isAdmin() || (isSignedIn() && isTeamLeader(request.resource.data.teamId));
    }
    
    match /problemStatements/{psId} {
      // READ: Any signed-in user can read problem statements.
      allow read: if isSignedIn();
      // WRITE: Only admins can create/update/delete problem statements.
      allow write: if isAdmin();
    }
    
    match /config/{configId} {
      // READ: The event config (like registration deadline) is public.
      allow read: if true;
      // WRITE: Only admins can change event configuration.
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      // READ: Announcements are public.
      allow read: if true;
      // WRITE: Only admins can create/update/delete announcements.
      allow write: if isAdmin();
    }

    match /notifications/{notificationId} {
      // READ/WRITE: Only the recipient of a notification can read or write to it.
      allow read, write: if isSignedIn() && isOwner(request.resource.data.recipientUid);
      // CREATE: Any signed-in user can create a notification (flow logic validates the action).
      allow create: if isSignedIn();
    }
    
    match /healthchecks/{docId} {
      // Only admins can write to the healthchecks collection for system tests.
      allow read, write: if isAdmin();
    }
  }
}
