rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin.
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is the owner of a document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if a user is a member of a specific team
    function isTeamMember(teamId) {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return user.teamId == teamId;
    }
    
    // Helper function to check if a user is a leader of a specific team
    function isTeamLeader(teamId) {
        let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
        return request.auth.uid == team.leader.uid;
    }

    // Helper function to check if a user is the SPOC for a team's institute
    function isInstituteSpocForTeam(teamId) {
        let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
        let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return user.role == 'spoc' && user.institute == team.institute && user.spocStatus == 'approved';
    }
    
     // Helper function to check if a user is an approved SPOC for another user's institute
    function isSpocWithUpdatePermission(targetUserId) {
      let spoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      let targetUser = get(/databases/$(database)/documents/users/$(targetUserId)).data;
      
      return spoc.role == 'spoc' &&
             spoc.spocStatus == 'approved' &&
             spoc.institute == targetUser.institute;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isAdmin() || isOwner(userId);
      allow write: if isAdmin() || isOwner(userId) || isSpocWithUpdatePermission(userId);
      
      // Allow authenticated users to query for existing SPOCs during registration.
      // This is a specific rule to enable the check in the complete-spoc-profile form.
      allow list: if request.auth != null &&
                     request.query.get('role') == 'spoc' &&
                     request.query.get('institute') != null;
    }
    
    // Teams Collection
    match /teams/{teamId} {
      allow read: if isAdmin() || isTeamMember(teamId) || isInstituteSpocForTeam(teamId);
      allow create: if request.auth != null; // Further checks are in flow logic
      allow update: if isAdmin() || isTeamLeader(teamId) || isInstituteSpocForTeam(teamId);
      allow delete: if isAdmin() || isInstituteSpocForTeam(teamId);
    }

    // Team Invites Collection (for joining via link)
    match /teamInvites/{inviteId} {
        allow read: if request.auth != null;
        allow create, write: if isAdmin() || isTeamLeader(request.resource.data.teamId);
    }
    
    // Problem Statements Collection
    match /problemStatements/{psId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Config Collection (for event settings)
    match /config/{configId} {
        allow read: if true; // Publicly readable for registration deadline
        allow write: if isAdmin();
    }
    
    // Announcements Collection
    match /announcements/{announcementId} {
      allow read: if true; // Publicly readable
      allow write: if isAdmin();
    }

    // Notifications Collection
    match /notifications/{notificationId} {
      allow read, write: if isOwner(request.resource.data.recipientUid);
      allow create: if request.auth != null; // Further checks are in flow logic
    }
    
    // Healthchecks collection (for system health check)
    match /healthchecks/{docId} {
        allow read, write: if isAdmin();
    }
  }
}
