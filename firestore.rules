rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ===== HELPER FUNCTIONS =====

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isTeamMate(userId) {
        let userTeamId = getUserData().teamId;
        let otherUserTeamId = get(/databases/$(database)/documents/users/$(userId)).data.teamId;
        // Allow if both users are on the same team and the teamId is not empty.
        return userTeamId != null && userTeamId != "" && userTeamId == otherUserTeamId;
    }

    function isAdmin() {
      return isSignedIn() && getUserData().role == 'admin';
    }

    function isTeamMember(teamId) {
      return isSignedIn() && getUserData().teamId == teamId;
    }
    
    function isTeamLeader(teamId) {
      let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
      return isSignedIn() && request.auth.uid == team.leader.uid;
    }

    function isApprovedSpocForInstitute(institute) {
        let user = getUserData();
        return isSignedIn() && user.role == 'spoc' && user.spocStatus == 'approved' && user.institute == institute;
    }

    function isSpocForUser(userId) {
        let userToCheck = get(/databases/$(database)/documents/users/$(userId)).data;
        return isApprovedSpocForInstitute(userToCheck.institute);
    }
    
    function isSpocForTeam(teamId) {
      let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
      return isApprovedSpocForInstitute(team.institute);
    }

    // ===== COLLECTION RULES =====

    // Users Collection
    match /users/{userId} {
      // Admins can read any profile. Users can read their own or a teammate's profile. SPOCs can read profiles from their institute.
      allow read: if isAdmin() || isOwner(userId) || isTeamMate(userId) || isSpocForUser(userId);
      
      // Admins can write to any profile. Users can write to their own profile. SPOCs can write to profiles in their institute.
      allow write: if isAdmin() || isOwner(userId) || isSpocForUser(userId);
      
      // Query permissions
      allow list: if 
          // Admins can list all users
          isAdmin() ||
          // SPOCs can list users from their institute
          (request.query.resource.data.institute == getUserData().institute && isApprovedSpocForInstitute(request.query.resource.data.institute)) ||
          // A user can query for their own profile by UID or enrollment number
          (request.query.resource.data.uid == request.auth.uid) ||
          (request.query.resource.data.enrollmentNumber == getUserData().enrollmentNumber);
    }
    
    // Teams Collection
    match /teams/{teamId} {
      // Admins, team members, and the institute's SPOC can read team data.
      allow read: if isAdmin() || isTeamMember(teamId) || isSpocForTeam(teamId);
      
      // Any signed-in user can create a team. The flow ensures only leaders do this.
      allow create: if isSignedIn();
      
      // Admins, team leaders, and the institute's SPOC can update team data.
      allow update: if isAdmin() || isTeamLeader(teamId) || isSpocForTeam(teamId);
      
      // Admins and the institute's SPOC can delete a team.
      allow delete: if isAdmin() || isSpocForTeam(teamId);

      allow list: if isAdmin() || isApprovedSpocForInstitute(request.query.resource.data.institute);
    }

    // Team Invites Collection (for permanent join links)
    match /teamInvites/{inviteId} {
        // Any signed-in user can read an invite to get team details.
        allow read: if true;
        // Team leaders can create/write their own team's invite. Admins can manage any.
        allow write: if isAdmin() || isTeamLeader(request.resource.data.teamId);
    }
    
    // Problem Statements Collection
    match /problemStatements/{psId} {
      // Any signed-in user can read problem statements.
      allow read: if isSignedIn();
      // Only admins can create, update, or delete problem statements.
      allow write: if isAdmin();
    }
    
    // Config Collection (for event settings like deadlines)
    match /config/{configId} {
        // Publicly readable for all users (e.g., to check registration deadline).
        allow read: if true;
        // Only admins can change settings.
        allow write: if isAdmin();
    }
    
    // Announcements Collection
    match /announcements/{announcementId} {
      // Publicly readable for landing page and dashboards.
      allow read: if true;
      // Only admins can post or delete announcements.
      allow write: if isAdmin();
    }

    // Notifications Collection (for team join/invite notifications)
    match /notifications/{notificationId} {
      // Users can only read/write notifications intended for them.
      allow read, write: if isOwner(resource.data.recipientUid);
      // Creating a notification is handled by backend flows, but rule requires user to be signed in.
      allow create: if isSignedIn();
      allow list: if isSignedIn() && request.query.resource.data.recipientUid == request.auth.uid;
    }
    
    // Healthchecks Collection (for system health check tool)
    match /healthchecks/{docId} {
        // Only allow admins to read/write health check documents.
        allow read, write: if isAdmin();
    }
  }
}