
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check user role
    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Helper function to check if a user is a member of a specific team
    function isTeamMember(teamId) {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId;
    }
    
    // Helper function to check if a user is a SPOC for a specific institute
    function isSpocForInstitute(institute) {
        let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return userProfile.role == 'spoc' && userProfile.institute == institute;
    }

    // Users can read/write their own profile, admins can manage all
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow read, write: if isRole('admin');
      
      // Allow SPOCs to read profiles of users from their institute
      allow get: if isSpocForInstitute(resource.data.institute);
    }
    
    // Config can be read by anyone, written by admins
    match /config/{docId} {
        allow read: if true;
        allow write: if isRole('admin');
    }

    // Teams can be read by their members or relevant SPOCs/admins
    match /teams/{teamId} {
      allow get: if isTeamMember(teamId) || isSpocForInstitute(resource.data.institute) || isRole('admin') || request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.members;
      allow list: if isRole('admin') || isRole('spoc');
      allow create, update: if isRole('leader') || isRole('admin') || isRole('spoc');
      allow delete: if isRole('admin') || isRole('spoc');
    }

    // Problem Statements can be read by anyone, written by admins
    match /problemStatements/{docId} {
        allow read: if true;
        allow write: if isRole('admin');
    }
    
    // Invitations: Handled by backend flows with admin privileges
    match /teamInvites/{inviteId} {
        allow read, write: if request.auth != null; // Authenticated users can read/write to handle join logic
    }
    
    // Departments can be read by anyone, written by SPOCs or Admins
    match /departments/{docId} {
        allow read: if true;
        allow write: if isRole('spoc') || isRole('admin');
    }
    
    // Institutes can be read by anyone, written by Admins
    match /institutes/{docId} {
        allow read: if true;
        allow write: if isRole('admin');
    }

    // Logs can only be written by the backend (admin access)
    match /logs/{logId} {
      allow read, write: if isRole('admin');
      allow create: if true; // Allows backend to write logs
    }

    // Notifications
    match /notifications/{notifId} {
      // Users can read and update their own notifications (e.g., mark as read)
      allow read, update: if request.auth.uid == resource.data.recipientUid;
      // Admins can read all notifications for debugging/auditing
      allow read: if isRole('admin');
      // Only the backend (admin) can create notifications
      allow create: if isRole('admin');
    }

    // Announcements
    match /announcements/{announcementId} {
        // Anyone can read announcements
        allow read: if true;
        // Only admins and spocs can create/delete announcements
        allow write: if isRole('admin') || isRole('spoc');
    }
    
    // Jury Panels
    match /juryPanels/{panelId} {
        // Admins have full access
        allow read, write: if isRole('admin');
        
        // Jury members can read their own panel
        function isJuryOfPanel() {
            let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
            return userProfile.role == 'jury' && userProfile.panelId == panelId;
        }
        allow get: if isJuryOfPanel();
    }
  }
}
