rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isRole(role) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isLeader() {
      return isRole('leader');
    }

    function isAdmin() {
      return isRole('admin');
    }
    
    function isSpoc() {
      return isRole('spoc');
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isMemberOf(teamId) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId;
    }
    
    function isSpocForInstitute(institute) {
       return isSpoc() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == institute;
    }
    
    function isNewMemberJoining(teamId) {
        // Allow if the user is adding themselves to the members array.
        let newMembers = request.resource.data.members;
        let oldMembers = resource.data.members;
        let addedMember = newMembers.diff(oldMembers).addedValues()[0];
        
        return newMembers.size() == oldMembers.size() + 1 &&
               addedMember.uid == request.auth.uid;
    }

    // Users Collection
    match /users/{userId} {
      // Anyone can create their own user document during signup
      allow create: if isSignedIn();
      
      // Users can only read their own document
      // Admins and SPOCs can read any user document
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin() || isSpoc());
      
      // Users can only update their own document
      // Admins and SPOCs can update any user document
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin() || isSpoc());
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // Teams Collection
    match /teams/{teamId} {
        // Only signed-in users can read team data
        allow read: if isSignedIn();
        
        // Creating a team is handled by a Genkit flow, so no direct client creation
        allow create: if isLeader();

        // Allow updates if user is admin, spoc, a member of the team, OR if a new member is joining.
        allow update: if isSignedIn() && (
                        isAdmin() || 
                        isSpocForInstitute(resource.data.institute) ||
                        isMemberOf(teamId) ||
                        isNewMemberJoining(teamId)
                      );

        // Only admins or the institute's SPOC can delete a team
        allow delete: if isSignedIn() && (isAdmin() || isSpocForInstitute(resource.data.institute));
    }
    
    // Team Invites Collection (Permanent Links)
    match /teamInvites/{inviteId} {
        // Anyone with the link can read the invite details
        allow read: if true;
        
        // Only team leaders, SPOCs, or admins can create/update invites (via flows)
        allow write: if isSignedIn() && (isLeader() || isSpoc() || isAdmin());
    }

    // Problem Statements
    match /problemStatements/{psId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    // Config Collection (e.g., for event settings)
    match /config/{docId} {
        // Everyone can read the configuration
        allow read: if true;
        
        // Only admins can change the configuration
        allow write: if isAdmin();
    }
    
    // Announcements Collection
    match /announcements/{announcementId} {
        // Everyone can read announcements
        allow read: if true;
        
        // Only admins and SPOCs (for their institute) can create/delete
        allow create: if isAdmin() || (isSpoc() && request.resource.data.institute == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute);
        allow delete: if isAdmin() || isSpoc();
    }

    // Notifications Collection
    match /notifications/{notificationId} {
        // Users can read and update (mark as read) their own notifications
        allow read, update: if isSignedIn() && resource.data.recipientUid == request.auth.uid;
        // Creation is handled by server-side flows
        allow create: if true; 
    }

    // Institutes Collection
    match /institutes/{instituteId} {
        // All users (including unauthenticated ones for registration) can read the list of institutes
        allow read: if true;
        // Only admins can create, update, or delete institutes
        allow write: if isAdmin();
    }

    // Departments Collection
    match /departments/{instituteName} {
        // All users (including unauthenticated ones for registration) can read department lists
        allow read: if true;
        // Admins can write to any department list
        // SPOCs can write to their own institute's department list
        allow write: if isAdmin() || isSpocForInstitute(instituteName);
    }
    
    // Healthchecks collection
    match /healthchecks/{docId} {
      allow write: if true;
      allow read, delete: if true;
    }
  }
}