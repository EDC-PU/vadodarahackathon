
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if a user is a team leader of a specific team
    function isTeamLeader(teamId) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data.leader.uid == request.auth.uid;
    }

    match /users/{userId} {
      // Allow read access for the owner or an admin
      allow read: if request.auth != null && (isOwner(userId) || isAdmin());
      // Allow create for any authenticated user (for registration)
      allow create: if request.auth != null;
      // Allow update for the owner or an admin
      allow update: if request.auth != null && (isOwner(userId) || isAdmin());
      // Disallow delete
      allow delete: if false;
    }

    match /teams/{teamId} {
        // Allow read for any authenticated user
        allow read: if request.auth != null;
        // Allow create for authenticated users
        allow create: if request.auth != null;
        // Allow updates only for the team leader or an admin
        allow update: if request.auth != null && (isTeamLeader(teamId) || isAdmin());
        // Allow deletes only for the team leader or an admin
        allow delete: if request.auth != null && (isTeamLeader(teamId) || isAdmin());
    }

    match /problemStatements/{statementId} {
        // Allow read for any authenticated user
        allow read: if request.auth != null;
        // Allow write access (create, update, delete) only for admins
        allow write: if request.auth != null && isAdmin();
    }
  }
}
