rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isSpocForTeam(teamId) {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
      return user.role == 'spoc' && user.institute == team.institute;
    }

    // USERS collection
    match /users/{userId} {
      // Anyone can create their own user document (on signup)
      allow create: if isSignedIn() && request.auth.uid == userId;
      // Users can read their own profile, admins can read any profile.
      allow read: if isSignedIn() && (request.auth.uid == userId || isRole('admin'));
      // Users can update their own profile. Admins can update any profile.
      allow update: if isSignedIn() && (request.auth.uid == userId || isRole('admin'));
      // Admins can delete users.
      allow delete: if isRole('admin');
    }

    // TEAMS collection
    match /teams/{teamId} {
      // Only team leaders can create teams.
      allow create: if isRole('leader');
      // Any signed-in user can read team data.
      allow read: if isSignedIn();
      // Only the team leader, SPOC for that institute, or an admin can update team data.
      allow update: if isSignedIn() && (
        request.auth.uid == resource.data.leader.uid || 
        isRole('admin') ||
        isSpocForTeam(teamId)
      );
      // Only an admin or the SPOC for that institute can delete a team.
      allow delete: if isRole('admin') || isSpocForTeam(teamId);
    }
    
    // TEAM INVITES collection (for direct email invites, if ever used)
    match /teamInvites/{inviteId} {
      allow read, write: if isSignedIn(); 
    }

    // ANNOUNCEMENTS collection
    match /announcements/{announcementId} {
      // Admins and SPOCs can create announcements.
      allow create: if isRole('admin') || isRole('spoc');
      // All signed-in users can read announcements.
      allow read: if isSignedIn();
      // Only the author, or an Admin, can delete an announcement.
      allow delete: if isRole('admin') || request.auth.uid == resource.data.authorUid;
    }
    
    // INSTITUTES collection
    match /institutes/{instituteId} {
      // Admins can manage institutes. SPOCs can update evaluation dates for their own institute.
      allow read, write: if isRole('admin');
      allow update: if isRole('spoc');
    }

    // DEPARTMENTS collection
    match /departments/{departmentId} {
        allow read: if isSignedIn();
        allow write: if isRole('spoc') || isRole('admin');
    }

    // CONFIG collection
    match /config/{configId} {
      allow read: if isSignedIn();
      allow write: if isRole('admin');
    }
    
    // LOGS collection
    match /logs/{logId} {
      // Only admins can read logs. Only server-side functions (admins) can write them.
      allow read: if isRole('admin');
      allow write: if false; // Prevent client-side writes
    }
    
    // NOTIFICATIONS collection
    match /notifications/{notificationId} {
      // Users can only read and update their own notifications.
      allow read, update: if isSignedIn() && request.auth.uid == resource.data.recipientUid;
      // Notifications are created server-side.
      allow create: if false;
    }

    // JURY PANELS collection
    match /juryPanels/{panelId} {
      // Admins can create, update, and delete panels.
      allow write: if isRole('admin');
      // Jury members can read their own panel details, and Admins can read all panels.
      allow read: if isSignedIn() && (isRole('admin') || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.panelId == panelId);
    }
  }
}
