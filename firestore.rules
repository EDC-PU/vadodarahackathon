rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getSelfData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      return isSignedIn() && getSelfData().role == 'admin';
    }

    function isTeamMate(userId) {
        let selfTeamId = getSelfData().teamId;
        let targetTeamId = getUserData(userId).teamId;
        return isSignedIn() && selfTeamId != null && selfTeamId == targetTeamId;
    }

    function isApprovedSpocForInstitute(institute) {
        let selfData = getSelfData();
        return isSignedIn() && selfData.role == 'spoc' && selfData.spocStatus == 'approved' && selfData.institute == institute;
    }

    // Collection Rules
    match /users/{userId} {
      // Allow read if:
      // 1. User is the owner of the document.
      // 2. User is an Admin.
      // 3. User is on the same team as the target user.
      // 4. User is an approved SPOC for the target user's institute.
      allow read: if isOwner(userId) || isAdmin() || isTeamMate(userId) || isApprovedSpocForInstitute(getUserData(userId).institute);

      // Allow write if:
      // 1. User is the owner of the document (covers profile completion for all roles).
      // 2. User is an Admin.
      // 3. User is an approved SPOC for a user in their institute.
      allow write: if isOwner(userId) || isAdmin() || isApprovedSpocForInstitute(getUserData(userId).institute);
      
      // Allow list queries if:
      // 1. User is an Admin (can query anything).
      // 2. User is an approved SPOC querying for users in their institute.
      // 3. Any signed-in user is querying for a specific user by UID or enrollment number (e.g., for profile pages).
      allow list: if isAdmin() ||
                   (isSignedIn() && getSelfData().role == 'spoc' && getSelfData().spocStatus == 'approved' && request.query.filters[0].field == 'institute' && request.query.filters[0].value == getSelfData().institute) ||
                   (isSignedIn() && request.query.limit <= 1 && request.query.filters[0].field == 'uid' && request.query.filters[0].value == request.auth.uid) ||
                   (isSignedIn() && request.query.limit <= 1 && request.query.filters[0].field == 'enrollmentNumber');
    }

    match /teams/{teamId} {
      // Read access for team members, SPOCs of the same institute, and admins.
      allow read: if isAdmin() || (isSignedIn() && getSelfData().teamId == teamId) || isApprovedSpocForInstitute(get(/databases/$(database)/documents/teams/$(teamId)).data.institute);
      // Write access for team leader, SPOCs, and admins.
      allow write: if isAdmin() || (isSignedIn() && getSelfData().uid == resource.data.leader.uid) || isApprovedSpocForInstitute(resource.data.institute);
      // List access for admins and SPOCs (who filter by their institute).
      allow list: if isAdmin() || (isSignedIn() && getSelfData().role == 'spoc');
    }

    match /teamInvites/{inviteId} {
        // Anyone with the link can read it to get team details.
        allow read: if true;
        // Only the team leader, SPOC, or admin can create invites.
        allow create: if isSignedIn() && (getSelfData().role == 'leader' || getSelfData().role == 'spoc' || isAdmin());
        // Only team members can update status (implicitly handled by functions). No direct updates.
        allow update: if false;
        // Only team leader, SPOC, or admin can delete.
        allow delete: if isSignedIn() && (getSelfData().role == 'leader' || getSelfData().role == 'spoc' || isAdmin());
    }

    match /problemStatements/{statementId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
      allow list: if isSignedIn();
    }
    
    match /config/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
     match /announcements/{announcementId} {
      allow read: if true;
      allow list: if true;
      allow create, update, delete: if isAdmin();
    }

    match /notifications/{notificationId} {
        allow read, write: if isOwner(resource.data.recipientUid);
        allow list: if isSignedIn() && request.query.filters[0].field == 'recipientUid' && request.query.filters[0].value == request.auth.uid;
        allow create: if isSignedIn(); // Any authenticated user can create a notification (server-side logic validates target)
    }
  }
}
