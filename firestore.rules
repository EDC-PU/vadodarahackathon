
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read/write any user document.
      // Users can read/update their own document.
      allow read, update: if isAdmin() || isOwner(userId);
      
      // Users can delete their own account.
      allow delete: if isOwner(userId);
      
      // Any authenticated user can create a user profile (for registration).
      allow create: if request.auth != null;
    }

    // Rules for the 'teams' collection
    match /teams/{teamId} {
      // Any authenticated user can read team data.
      allow read: if request.auth != null;
      
      // Only the team leader or an admin can update or delete a team.
      allow update, delete: if isAdmin() || (request.auth != null && resource.data.leader.uid == request.auth.uid);
      
      // Any authenticated user can create a team (on registration).
      allow create: if request.auth != null;
    }

    // Rules for the 'problemStatements' collection
    match /problemStatements/{statementId} {
      // Any authenticated user can read problem statements.
      allow read: if request.auth != null;
      
      // Only admins can create, update, or delete problem statements.
      allow write: if isAdmin();
    }
  }
}
