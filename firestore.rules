
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getSelfData() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function getUserData(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      return isSignedIn() && getSelfData().role == 'admin';
    }

    function isTeamMate(userId) {
      let selfData = getSelfData();
      let targetUserData = getUserData(userId);
      return isSignedIn() && selfData.teamId != null && selfData.teamId == targetUserData.teamId;
    }
    
    function isApprovedSpocForInstitute(institute) {
    	let selfData = getSelfData();
      return isSignedIn() && selfData.role == 'spoc' && selfData.spocStatus == 'approved' && selfData.institute == institute;
    }
    
    // Unapproved SPOCs can still write to their own profile to complete it.
    function isOwnerOrAdminOrApprovedSpoc(userId) {
      return isOwner(userId) || isAdmin() || isApprovedSpocForInstitute(getUserData(userId).institute);
    }
    
    // =====================================================================
    // Collection Rules
    // =====================================================================

    match /users/{userId} {
      // Allow read if:
      // 1. User is the owner of the document.
      // 2. User is an Admin.
      // 3. User is on the same team as the target user.
      // 4. User is an approved SPOC for the target user's institute.
      allow read: if isOwner(userId) || isAdmin() || isTeamMate(userId) || isApprovedSpocForInstitute(getUserData(userId).institute);

      // Allow write if:
      // 1. User is the owner of the document (covers profile completion for all roles).
      // 2. User is an Admin.
      // 3. User is an approved SPOC for the target user's institute.
      allow write: if isOwner(userId) || isAdmin() || isApprovedSpocForInstitute(getUserData(userId).institute);
      
      // Allow list queries if:
      // 1. User is an Admin (can query anything).
      // 2. User is querying for their own profile by UID.
      // 3. User is querying for their own profile by enrollment number.
      // 4. User is an approved SPOC querying for users in their institute.
      allow list: if isAdmin() ||
                   (isSignedIn() && request.query.limit <= 1 && request.query.filters[0].field == 'uid' && request.query.filters[0].value == request.auth.uid) ||
                   (isSignedIn() && request.query.limit <= 1 && request.query.filters[0].field == 'enrollmentNumber' && request.query.filters[0].value == getSelfData().enrollmentNumber) ||
                   (isSignedIn() && getSelfData().role == 'spoc' && getSelfData().spocStatus == 'approved' && request.query.filters[0].field == 'institute' && request.query.filters[0].value == getSelfData().institute);
    }

    match /teams/{teamId} {
      allow read: if isSignedIn(); // Any authenticated user can read team details
      allow create: if isSignedIn(); // Any authenticated user can create a team initially
      allow update: if isOwner(get(after /databases/$(database)/documents/teams/$(teamId)).data.leader.uid) ||
                       isAdmin() ||
                       isApprovedSpocForInstitute(get(after /databases/$(database)/documents/teams/$(teamId)).data.institute);
      allow delete: if isAdmin() || isApprovedSpocForInstitute(resource.data.institute);
    }
    
    match /config/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
        allow read: if true; // Public can read
        allow write: if isAdmin(); // Only admins can create/update/delete
    }

    match /problemStatements/{psId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /teamInvites/{inviteId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow write: if isAdmin() || getSelfData().role == 'leader' || isApprovedSpocForInstitute(getSelfData().institute);
    }
    
    match /notifications/{notificationId} {
        allow read, write: if isOwner(resource.data.recipientUid);
        allow create: if isSignedIn();
    }
    
    match /healthchecks/{docId} {
        allow read, write: if isAdmin();
    }
  }
}
