rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function getTeamData(teamId) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data;
    }

    function isTeamLeader(teamId) {
      let user = getUserData(request.auth.uid);
      return user.role == 'leader' && user.teamId == teamId;
    }
    
    function isTeamMember(teamId) {
      let team = getTeamData(teamId);
      // Check if user is the leader or in the members array
      return request.auth.uid == team.leader.uid || request.auth.uid in team.members.map(member => member.uid);
    }
    
    function isSpocForTeam(teamId) {
        let user = getUserData(request.auth.uid);
        let team = getTeamData(teamId);
        return user.role == 'spoc' && user.institute == team.institute;
    }

    function isAdmin() {
      // Check for the existence of role and if it is 'admin'
      return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && getUserData(request.auth.uid).role == 'admin';
    }

    // USERS collection
    match /users/{userId} {
      // Any authenticated user can read any user's profile (for team/SPOC details)
      allow get: if isSignedIn();
      // A user can list their own profile, admins can list all
      allow list: if isUser(userId) || isAdmin();
      // A user can only write to their own profile, or an admin can.
      allow write: if isUser(userId) || isAdmin();
    }

    // TEAMS collection
    match /teams/{teamId} {
      // A user can read a team document if they are a member, a relevant SPOC, or an admin
      allow get: if isTeamMember(teamId) || isSpocForTeam(teamId) || isAdmin();
      // Users can query teams, permissions are checked at the read level.
      allow list: if isSignedIn();
      // Only the team leader can update their team details.
      allow update: if isTeamLeader(teamId);
       // Only an admin or a spoc can delete a team
      allow delete: if isAdmin() || isSpocForTeam(teamId);
      // Only an authenticated user can create a team (further logic in flows)
      allow create: if isSignedIn();
    }

    // INVITATIONS collection
    match /invitations/{invitationId} {
        // An invitation can be read by the leader of the team that sent it,
        // or by the user who it is addressed to.
        allow read: if isTeamLeader(resource.data.teamId) || getUserData(request.auth.uid).email == resource.data.email || isAdmin();
        // A user can update an invitation if they are the intended recipient (to accept/reject)
        allow update: if getUserData(request.auth.uid).email == resource.data.email;
        // Authenticated users can create invitations.
        allow create: if isSignedIn();
        // Only the team leader can delete an invitation they sent
        allow delete: if isTeamLeader(resource.data.teamId);
    }
    
    // PROBLEM STATEMENTS, ANNOUNCEMENTS, CONFIG can be read by anyone, written by admins
    match /{collection}/{docId} {
       allow read: if isSignedIn();
       allow write: if isAdmin();
    }
  }
}
