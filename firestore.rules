rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to keep rules DRY
    function isSignedIn(request) {
      return request.auth != null;
    }

    function isUser(request, userId) {
      return isSignedIn(request) && request.auth.uid == userId;
    }

    function getUserData(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin(userId) {
        return getUserData(userId).role == 'admin';
    }

    function isSpoc(userId) {
        return getUserData(userId).role == 'spoc';
    }

    function isLeader(userId) {
        return getUserData(userId).role == 'leader';
    }
    
    function isJury(userId) {
        return getUserData(userId).role == 'jury';
    }

    function isTeamMember(request, teamId) {
      let userData = getUserData(request.auth.uid);
      return isSignedIn(request) && userData.teamId == teamId;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isSignedIn(request);
      allow create: if !isSignedIn(request); // Allow user creation during signup
      allow update: if isUser(request, userId) || isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }

    // Teams Collection
    match /teams/{teamId} {
      allow read: if isSignedIn(request);
      allow create: if isLeader(request.auth.uid);
      allow update: if isLeader(request.auth.uid) && isTeamMember(request, teamId) || isSpoc(request.auth.uid) || isAdmin(request.auth.uid);
      allow delete: if (isSpoc(request.auth.uid) || isAdmin(request.auth.uid));
    }
    
    // Team Invites (for joining teams)
    match /teamInvites/{inviteId} {
      allow read: if true; // Publicly readable to allow fetching details
      allow create: if isLeader(request.auth.uid) || isSpoc(request.auth.uid) || isAdmin(request.auth.uid);
      allow delete: if isSpoc(request.auth.uid) || isAdmin(request.auth.uid);
    }
    
    // Departments managed by SPOCs
    match /departments/{docId} {
        allow read: if isSignedIn(request);
        allow create, update: if isSpoc(request.auth.uid) || isAdmin(request.auth.uid);
    }
    
    // Problem Statements
    match /problemStatements/{psId} {
      allow read: if true;
      allow create, update, delete: if isAdmin(request.auth.uid);
    }
    
    // General Config
    match /config/{docId} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid);
    }
    
    // Notifications
    match /notifications/{notifId} {
      allow read: if isSignedIn(request) && request.auth.uid == resource.data.recipientUid;
      allow create: if isLeader(request.auth.uid) || isSpoc(request.auth.uid) || isAdmin(request.auth.uid);
      allow update: if isUser(request, resource.data.recipientUid); // for marking as read
    }

    // Announcements
    match /announcements/{announcementId} {
      allow read: if true; // Publicly readable
      allow create, delete: if isSpoc(request.auth.uid) || isAdmin(request.auth.uid);
    }
    
    // Logs
    match /logs/{logId} {
        allow read, write: if isAdmin(request.auth.uid); // Only admins can read/write logs
    }
    
    // Institutes
    match /institutes/{instituteId} {
      allow read: if true;
      allow create, update, delete: if isAdmin(request.auth.uid);
    }
    
    // Jury Panels
    match /juryPanels/{panelId} {
        allow read: if isJury(request.auth.uid) && getUserData(request.auth.uid).panelId == panelId || isAdmin(request.auth.uid);
        allow create, update, delete: if isAdmin(request.auth.uid);
    }
    
  }
}
