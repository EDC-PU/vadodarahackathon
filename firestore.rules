
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isRole(role) {
      return isSignedIn() && getRole() == role;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isSpocForInstitute(institute) {
       return isRole('spoc') && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == institute;
    }

    // A user is a member of the team if their UID is in the members list or if they are the leader
    function isTeamMember(team) {
      return request.auth.uid == team.leader.uid || request.auth.uid in team.members.map(member => member.uid);
    }
    
    // Checks if the incoming request is adding exactly one new member, and that member is the one making the request.
    function isJoiningTeam(request, resource) {
      let incomingMembers = request.resource.data.members;
      let existingMembers = resource.data.members;
      // Ensure we are adding exactly one member.
      return incomingMembers.size() == existingMembers.size() + 1 &&
             // Ensure the new member being added is the person making the request.
             incomingMembers.diff(existingMembers).addedKeys().hasAny([request.auth.uid]);
    }

    // Users Collection
    match /users/{userId} {
      // Anyone can create their own user document during signup
      allow create: if isSignedIn();
      
      // Users can only read their own document
      // Admins and SPOCs can read any user document
      allow read: if isSignedIn() && (isOwner(userId) || isRole('admin') || isRole('spoc'));
      
      // A user can update their own profile, or an admin/spoc can.
      allow update: if isSignedIn() && (isOwner(userId) || isRole('admin') || isSpocForInstitute(resource.data.institute));
      
      // Only admins can delete users (or users can delete their own profile via a flow)
      allow delete: if isRole('admin') || isOwner(userId);
    }
    
    // Teams Collection
    match /teams/{teamId} {
        // Only signed-in users can read team data
        allow read: if isSignedIn();
        
        // Creating a team is handled by a Genkit flow, but this allows leaders to create.
        allow create: if isRole('leader');

        // Team can be updated by a member, an admin, a spoc, or a new user joining the team.
        allow update: if isSignedIn() && (isTeamMember(resource.data) || isRole('admin') || isSpocForInstitute(resource.data.institute) || isJoiningTeam(request, resource));

        // Only admins or the institute's SPOC can delete a team
        allow delete: if isSignedIn() && (isRole('admin') || isSpocForInstitute(resource.data.institute));
    }
    
    // Team Invites Collection (Permanent Links)
    match /teamInvites/{inviteId} {
        // Anyone with the link can read the invite details
        allow read: if true;
        
        // Only team leaders, SPOCs, or admins can create/update invites (via flows)
        allow write: if isSignedIn() && (isRole('leader') || isRole('spoc') || isRole('admin'));
    }

    // Problem Statements
    match /problemStatements/{psId} {
        allow read: if isSignedIn();
        allow write: if isRole('admin');
    }
    
    // Config Collection (e.g., for event settings)
    match /config/{docId} {
        // Everyone can read the configuration
        allow read: if true;
        
        // Only admins can change the configuration
        allow write: if isRole('admin');
    }
    
    // Announcements Collection
    match /announcements/{announcementId} {
        // Everyone can read announcements
        allow read: if true;
        
        // Only admins and SPOCs (for their institute) can create/delete
        allow create: if isRole('admin') || (isRole('spoc') && request.resource.data.institute == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute);
        allow delete: if isRole('admin') || isRole('spoc');
    }

    // Notifications Collection
    match /notifications/{notificationId} {
        // Users can read and update (mark as read) their own notifications
        allow read, update: if isSignedIn() && resource.data.recipientUid == request.auth.uid;
        // Creation is handled by server-side flows
        allow create: if isSignedIn(); 
    }

    // Institutes Collection
    match /institutes/{instituteId} {
        // All users (including unauthenticated ones for registration) can read the list of institutes
        allow read: if true;
        // Only admins can create, update, or delete institutes
        allow write: if isRole('admin');
    }

    // Departments Collection
    match /departments/{instituteName} {
        // All users (including unauthenticated ones for registration) can read department lists
        allow read: if true;
        // Admins can write to any department list
        // SPOCs can write to their own institute's department list
        allow write: if isRole('admin') || isSpocForInstitute(instituteName);
    }
  }
}
