rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to get a user's role from their profile document
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return getUserRole(userId) == 'admin';
    }

    // `users` collection rules
    match /users/{userId} {
      // Allow users to read and update their OWN profile
      allow read, update: if request.auth.uid == userId;
      // Admins can read any user profile
      allow get: if isAdmin(request.auth.uid);
      // Admins can create or delete user docs (used by server-side flows)
      allow create, delete: if isAdmin(request.auth.uid);
      // Public read access for some pages like SPOC list.
      // More specific queries should be used to protect data.
      allow list: if request.auth != null;
    }

    // `teams` collection rules
    match /teams/{teamId} {
      // Only authenticated users can create teams
      allow create: if request.auth != null;
      
      // Team leaders and admins can update team details
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'leader' && get(/databases/$(database)/documents/teams/$(teamId)).data.leader.uid == request.auth.uid
                      || isAdmin(request.auth.uid);

      // Team members, leaders, SPOCs, and admins can read team data
      allow read: if request.auth.uid in resource.data.members..uid 
                   || request.auth.uid == resource.data.leader.uid
                   || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == resource.data.institute
                   || isAdmin(request.auth.uid);
                   
      // Admins and SPOCs (of the same institute) can delete teams
      allow delete: if isAdmin(request.auth.uid)
                     || (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'spoc' && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == resource.data.institute);
    }
    
    // `problemStatements` collection rules
    match /problemStatements/{statementId} {
      // Any authenticated user can read problem statements
      allow read: if request.auth != null;
      // Only admins can create, update, or delete them
      allow write: if isAdmin(request.auth.uid);
    }
    
    // `announcements` collection rules
    match /announcements/{announcementId} {
        // Any authenticated user can read announcements
        allow read: if request.auth != null;
        // Only admins can create or delete them
        allow create, delete: if isAdmin(request.auth.uid);
    }
    
    // `config` collection rules (for event settings like deadlines)
    match /config/{configId} {
      // Anyone can read config settings
      allow read: if true;
      // Only admins can change them
      allow write: if isAdmin(request.auth.uid);
    }
    
     // Health check collection (server-side only)
    match /__healthchecks__/{docId} {
      allow read, write: if false; // No client access
    }
  }
}
