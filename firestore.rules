
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isTeamMember(teamId) {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return user.teamId == teamId;
    }

    function isTeamLeader(teamId) {
        let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
        return request.auth.uid == team.leader.uid;
    }

    function isInstituteSpocForTeam(teamId) {
        let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
        let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return user.role == 'spoc' && user.institute == team.institute && user.spocStatus == 'approved';
    }
    
    function isInstituteSpocForUser(userId) {
        let userToAccess = get(/databases/$(database)/documents/users/$(userId)).data;
        let spoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return spoc.role == 'spoc' && spoc.institute == userToAccess.institute && spoc.spocStatus == 'approved';
    }

    // Collections
    match /users/{userId} {
      // Admins and owners can read/write their own profiles.
      // SPOCs can write to users of their institute (e.g. to remove them from a team).
      allow read: if isAdmin() || isOwner(userId);
      allow write: if isAdmin() || isOwner(userId) || isInstituteSpocForUser(userId);

      // This is the critical rule:
      // Allow any authenticated user to LIST users ONLY IF the query is filtering for SPOCs.
      // This is required for the SPOC registration form to check for duplicates.
      allow list: if request.auth != null && request.query.get('role') == 'spoc';
    }
    
    match /teams/{teamId} {
      allow read: if isAdmin() || isTeamMember(teamId) || isInstituteSpocForTeam(teamId);
      allow create: if request.auth != null; // Further checks are in the createTeamFlow
      allow update: if isAdmin() || isTeamLeader(teamId) || isInstituteSpocForTeam(teamId);
      allow delete: if isAdmin() || isTeamLeader(teamId) || isInstituteSpocForTeam(teamId);
    }

    match /teamInvites/{inviteId} {
      allow read: if request.auth != null;
      allow write: if isAdmin() || isTeamLeader(request.resource.data.teamId);
    }
    
    match /problemStatements/{psId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    match /config/{configId} {
      allow read: if true; // Publicly readable for registration deadline
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read: if true; // All announcements are public
      allow write: if isAdmin();
    }

    match /notifications/{notificationId} {
      allow read, write: if isOwner(request.resource.data.recipientUid);
      allow create: if request.auth != null; // Logic is handled in flows
    }
    
    match /healthchecks/{docId} {
      allow read, write: if isAdmin();
    }
  }
}
