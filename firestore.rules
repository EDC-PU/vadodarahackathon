
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserData() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isAdmin() {
      return isSignedIn() && getUserData().role == 'admin';
    }

    function isSpoc() {
        return isSignedIn() && getUserData().role == 'spoc';
    }
    
    function isTeamLeader(teamId) {
      return isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.leader.uid == request.auth.uid;
    }

    function isTeamMember(teamId) {
        let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
        return isSignedIn() && (request.auth.uid == team.leader.uid || request.auth.uid in team.members.map(member => member.uid));
    }
    
    function isSpocForInstitute(institute) {
        return isSpoc() && getUserData().institute == institute;
    }

    // USERS
    match /users/{userId} {
      // Allow reads (get) for any authenticated user.
      allow get: if isSignedIn();
      // Allow queries (list) for any authenticated user.
      allow list: if isSignedIn();
      // A user can only update their own profile.
      allow update: if isOwner(userId);
      // Allow creation for new users signing up.
      allow create: if isOwner(userId);
    }

    // TEAMS
    match /teams/{teamId} {
        function isSpocForThisTeam() {
          return isSpocForInstitute(get(/databases/$(database)/documents/teams/$(teamId)).data.institute);
        }
        
        allow read: if isTeamMember(teamId) || isAdmin() || isSpocForThisTeam();
        allow create: if isSignedIn();
        allow update: if isTeamLeader(teamId) || isAdmin() || isSpocForThisTeam();
        allow delete: if isAdmin() || isSpocForThisTeam();
    }

    // INVITATIONS
    match /invitations/{invitationId} {
        allow create: if isSignedIn();
        allow read, update: if isSignedIn() && (
            resource.data.email == request.auth.email || // User who received the invitation
            isTeamLeader(resource.data.teamId) // Leader of the team who sent it
        );
    }
    
    // PUBLIC & ADMIN-WRITABLE COLLECTIONS
    match /problemStatements/{docId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    match /config/{docId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    match /announcements/{docId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
  }
}
