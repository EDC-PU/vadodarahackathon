rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isRole(role) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // A SPOC can edit a user if the user's institute matches the SPOC's institute
    function isSpocForUser(userId) {
      let userInstitute = get(/databases/$(database)/documents/users/$(userId)).data.institute;
      let spocInstitute = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute;
      return isRole('spoc') && userInstitute == spocInstitute;
    }

    match /users/{userId} {
      allow create: if isSignedIn();
      allow read: if isSignedIn();
      // Only owner, admin, or the user's SPOC can update
      allow update: if isOwner(userId) || isRole('admin') || isSpocForUser(userId);
      allow delete: if isRole('admin') || isOwner(userId);
      allow list: if isRole('admin') || isRole('spoc');
    }

    match /teams/{teamId} {
      allow read: if isSignedIn();
      allow create: if isRole('leader');
      allow update: if isRole('leader') || isRole('admin') || isRole('spoc');
      allow delete: if isRole('leader') || isRole('admin') || isRole('spoc');
    }

    match /problemStatements/{statementId} {
      allow read: if isSignedIn();
      allow write: if isRole('admin');
    }

    match /teamInvites/{inviteId} {
        allow read, create: if isRole('leader') || isRole('admin') || isRole('spoc');
        allow update, delete: if isRole('leader') || isRole('admin') || isRole('spoc');
    }

    match /institutes/{instituteId} {
      allow read: if isSignedIn();
      allow write: if isRole('admin');
    }

    match /departments/{docId} {
        allow read: if isSignedIn();
        allow write: if isRole('admin') || isRole('spoc');
    }
    
    match /config/{configId} {
        allow read: if isSignedIn();
        allow write: if isRole('admin');
    }
    
     match /notifications/{notificationId} {
      allow read, update, delete: if request.auth.uid == resource.data.recipientUid;
      allow create: if isSignedIn();
    }
  }
}
