rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isTeamMember(teamId) {
        let teamData = get(/databases/$(database)/documents/teams/$(teamId)).data;
        return request.auth.uid == teamData.leader.uid || teamData.members.map(m => m.uid).hasAny([request.auth.uid]);
    }
    
    function isTeamLeader(teamId) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data.leader.uid == request.auth.uid;
    }
    
    function isSpocForTeam(teamId) {
        let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
        return user.role == 'spoc' && user.institute == team.institute;
    }
    
    function isSpocForInstitute(instituteName) {
        let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return user.role == 'spoc' && user.institute == instituteName;
    }

    function isJuryMemberForTeam(teamId) {
        let teamPanelId = get(/databases/$(database)/documents/teams/$(teamId)).data.panelId;
        let userPanelId = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.panelId;
        return teamPanelId != null && userPanelId != null && teamPanelId == userPanelId;
    }


    // Collection Rules
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if !isSignedIn() || request.auth.uid == userId; // Allow creation on signup
      allow update: if request.auth.uid == userId || isRole('admin');
      allow delete: if isRole('admin');
    }

    match /teams/{teamId} {
      allow read: if isTeamMember(teamId) || isSpocForTeam(teamId) || isRole('admin') || isJuryMemberForTeam(teamId);
      allow create: if isRole('leader');
      allow update: if isTeamLeader(teamId) || isSpocForTeam(teamId) || isRole('admin');
      allow delete: if isSpocForTeam(teamId) || isRole('admin');
    }
    
    match /problemStatements/{psId} {
      allow read: if true;
      allow write: if isRole('admin');
    }
    
    match /teamInvites/{inviteId} {
      allow read: if true;
      allow create: if isRole('leader') || isRole('admin');
      allow write: if isRole('leader') || isRole('admin');
    }

    match /departments/{deptId} {
      allow read: if true;
      allow write: if isRole('spoc') || isRole('admin');
    }

    match /institutes/{instId} {
        allow read: if true;
        allow write: if isRole('admin');
        allow update(evaluationDates): if isSpocForInstitute(resource.data.name);
        allow update(studentCoordinatorName, studentCoordinatorContact): if isSpocForInstitute(resource.data.name);
    }
    
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isRole('admin') || isRole('spoc');
    }
    
    match /notifications/{notificationId} {
      allow read, write: if isSignedIn();
    }
    
    match /config/{configId} {
      allow read: if true;
      allow write: if isRole('admin');
    }

    match /logs/{logId} {
      allow read: if isRole('admin');
      allow create: if isSignedIn();
    }

    match /juryPanels/{panelId} {
        allow read: if isRole('admin') || isRole('jury');
        allow write: if isRole('admin');
    }
  }
}