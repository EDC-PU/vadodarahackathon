rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAppUser(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }
    
    function isTeamLeader(userId, teamId) {
      return get(/databases/$(database)/documents/teams/$(teamId)).data.leader.uid == userId;
    }

    // Allow admins full access
    match /{document=**} {
      allow read, write: if request.auth.token.role == 'admin';
    }

    // USER-SPECIFIC RULES
    match /users/{userId} {
      // Any authenticated user can query the users collection (e.g., to see if an email exists)
      allow list: if request.auth != null;
      // But a user can only get/read their own document
      allow get, update, delete: if request.auth.uid == userId;
      // Allow any authenticated user to create their own user document
      allow create: if request.auth.uid == userId;
    }
    
    match /teams/{teamId} {
        // Any team member can read their team's data
        allow read: if request.auth.token.teamId == teamId || request.auth.token.role == 'admin';
        // Only the leader can update the team
        allow update: if isTeamLeader(request.auth.uid, teamId);
    }
    
    match /invitations/{invitationId} {
        // Any authenticated user can query/list invitations (e.g., to check for duplicates)
        allow list: if request.auth != null;
        // Any authenticated user can create an invitation
        allow create: if request.auth != null;
        // A user can read/update an invitation if it's for them
        allow read, update: if request.auth.token.email == resource.data.email;
    }

    // PUBLIC/READ-ONLY RULES
    match /problemStatements/{psId} {
      allow get, list: if request.auth != null;
    }
    match /announcements/{announcementId} {
      allow get, list: if request.auth != null;
    }
    match /config/{configId} {
      allow get, list: if request.auth != null;
    }
  }
}
