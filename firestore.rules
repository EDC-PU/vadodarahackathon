rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isLeader() {
        // Check if the user's role in their own document is 'leader'
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'leader';
    }

    function isTeamLeader(teamId) {
        // Check if the current user is the leader of a specific team
        return get(/databases/$(database)/documents/teams/$(teamId)).data.leader.uid == request.auth.uid;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isSpoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'spoc';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isSpocForInstitute(institute) {
       return isSpoc() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == institute;
    }

    // Users Collection
    match /users/{userId} {
      allow create: if isSignedIn();
      
      // Allow read if:
      // 1. You are the owner of the document.
      // 2. You are an Admin or a SPOC.
      // 3. You are the leader of the team the user belongs to.
      // 4. You and the user are in the same team.
      allow read: if isSignedIn() && (
                    isOwner(userId) || 
                    isAdmin() || 
                    isSpoc() ||
                    (exists(/databases/$(database)/documents/users/$(userId)) && 
                     isTeamLeader(get(/databases/$(database)/documents/users/$(userId)).data.teamId)) ||
                    (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == 
                     get(/databases/$(database)/documents/users/$(userId)).data.teamId)
                  );
      
      // Users can only update their own document
      // Admins and SPOCs can update any user document
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin() || isSpocForInstitute(get(/databases/$(database)/documents/users/$(userId)).data.institute));
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // Teams Collection
    match /teams/{teamId} {
        allow read: if isSignedIn();
        
        allow create: if isLeader();

        // Allow update if the user is a member of the team, or an admin, or a relevant SPOC.
        // A user is a member if their UID is in the team's member list or if they are the leader.
        allow update: if isSignedIn() && (
                        isTeamLeader(teamId) || 
                        request.auth.uid in resource.data.members.map(m => m.uid) ||
                        isAdmin() || 
                        isSpocForInstitute(resource.data.institute)
                      );

        allow delete: if isSignedIn() && (isAdmin() || isSpocForInstitute(resource.data.institute));
    }
    
    // Team Invites Collection (Permanent Links)
    match /teamInvites/{inviteId} {
        allow read: if true;
        allow write: if isSignedIn() && (isLeader() || isSpoc() || isAdmin());
    }

    // Problem Statements
    match /problemStatements/{psId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    match /config/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
        allow read: if true;
        allow create: if isAdmin() || (isSpoc() && request.resource.data.institute == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute);
        allow delete: if isAdmin() || isSpoc();
    }

    match /notifications/{notificationId} {
        allow read, update: if isSignedIn() && get(/databases/$(database)/documents/notifications/$(notificationId)).data.recipientUid == request.auth.uid;
        allow create: if isSignedIn(); 
    }

    match /institutes/{instituteId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /departments/{instituteName} {
        allow read: if true;
        allow write: if isAdmin() || isSpocForInstitute(instituteName);
    }
  }
}