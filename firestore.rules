rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function isAdmin() {
      return isSignedIn() && getUserData(request.auth.uid).role == 'admin';
    }
    
    function isSpoc() {
       return isSignedIn() && getUserData(request.auth.uid).role == 'spoc';
    }

    // Collection Rules
    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin();
      allow write: if isUser(userId) || isAdmin();
      allow create: if isSignedIn();
    }
    
    match /teams/{teamId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        
        // Only the team leader or an admin can update/delete the team
        allow update, delete: if isSignedIn() && 
                                  (request.auth.uid == resource.data.leader.uid || isAdmin());
    }

    match /problemStatements/{statementId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }
    
    match /announcements/{announcementId} {
        allow read: if true; // Everyone can read announcements
        allow create, update, delete: if isAdmin();
    }
  }
}