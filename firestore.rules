
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isSpoc() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'spoc';
    }

    function isSpocApproved() {
      return isSpoc() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.spocStatus == 'approved';
    }
    
    function isLeader() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'leader';
    }

    function isTeamMember(teamId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId;
    }

    // USERS collection
    match /users/{userId} {
      allow read: if request.auth != null; // Any authenticated user can read user profiles
      allow create: if request.auth.uid != null; // Any authenticated user can create their own user document
      allow write: if isOwner(userId) || isAdmin(); // Only the user themselves or an admin can update a profile
    }

    // TEAMS collection
    match /teams/{teamId} {
      allow read: if request.auth != null; // Any authenticated user can read team details
      allow create: if isLeader(); // Only a team leader can create a team
      allow update: if 
          isTeamMember(teamId) ||
          (isSpocApproved() && get(/databases/$(database)/documents/teams/$(teamId)).data.institute == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute) ||
          isAdmin();
      allow delete: if 
          (isSpocApproved() && get(/databases/$(database)/documents/teams/$(teamId)).data.institute == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute) ||
          isAdmin();
    }
    
    // TEAM INVITES (Permanent links)
    match /teamInvites/{inviteId} {
      allow read: if request.auth != null; // Allow any authenticated user to read to check invite details
      allow create: if isLeader() || isSpocApproved(); // Leaders and SPOCs can create invite links
      allow write: if isAdmin(); // Only admins can modify them
      allow delete: if isAdmin();
    }

    // PROBLEM STATEMENTS collection
    match /problemStatements/{statementId} {
      allow read: if true; // Problem statements are public
      allow write: if isAdmin(); // Only admins can create/update/delete
    }

    // NOTIFICATIONS collection
    match /notifications/{notificationId} {
        allow read, write: if isOwner(get(/databases/$(database)/documents/notifications/$(notificationId)).data.recipientUid); // Only recipient can manage their notification
        allow create: if request.auth != null; // Any authenticated user can trigger a notification creation through a backend flow
        allow delete: if isAdmin() || isOwner(get(/databases/$(database)/documents/notifications/$(notificationId)).data.recipientUid);
    }
    
    // ANNOUNCEMENTS collection
    match /announcements/{announcementId} {
      allow read: if true; // Announcements are public
      allow write: if isAdmin() || isSpocApproved();
    }
    
    // CONFIG collection
    match /config/{configId} {
        allow read: if true;
        allow write: if isAdmin();
    }

  }
}
