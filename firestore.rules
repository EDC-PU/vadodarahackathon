rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getSelfData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      return isSignedIn() && getSelfData().role == 'admin';
    }

    function isTeamMate(targetUserId) {
      let selfData = getSelfData();
      let targetData = getUserData(targetUserId);
      return selfData.teamId != null && selfData.teamId == targetData.teamId;
    }
    
    function isApprovedSpocForInstitute(institute) {
        let selfData = getSelfData();
        return selfData.role == 'spoc' 
            && selfData.spocStatus == 'approved' 
            && selfData.institute == institute;
    }

    // Collection Rules
    match /users/{userId} {
      // Allow read if:
      // 1. User is the owner of the document.
      // 2. User is an Admin.
      // 3. User is on the same team as the target user.
      // 4. User is an approved SPOC for the target user's institute.
      allow read: if isOwner(userId) || isAdmin() || isTeamMate(userId) || isApprovedSpocForInstitute(getUserData(userId).institute);

      // Allow write if:
      // 1. User is the owner of the document (covers profile completion for all roles).
      // 2. User is an Admin.
      // 3. User is an approved SPOC for the target user's institute.
      allow write: if isOwner(userId) || isAdmin() || isApprovedSpocForInstitute(getUserData(userId).institute);
      
      // Allow list queries if:
      // 1. User is an Admin (can query anything).
      // 2. User is querying for their own profile by UID.
      // 3. User is querying for their own profile by enrollment number.
      // 4. User is an approved SPOC querying for users in their institute.
      allow list: if isAdmin() ||
                   (isSignedIn() && request.query.limit <= 1 && request.query.filters[0].field == 'uid' && request.query.filters[0].value == request.auth.uid) ||
                   (isSignedIn() && getSelfData().enrollmentNumber != null && request.query.limit <= 1 && request.query.filters[0].field == 'enrollmentNumber' && request.query.filters[0].value == getSelfData().enrollmentNumber) ||
                   (isSignedIn() && getSelfData().role == 'spoc' && getSelfData().spocStatus == 'approved' && request.query.filters[0].field == 'institute' && request.query.filters[0].value == getSelfData().institute);
    }
    
    match /teams/{teamId} {
        // Anyone can read team data, as it's not sensitive.
        allow read: if isSignedIn();
        
        // Allow write if:
        // 1. User is an Admin.
        // 2. User is the leader of the team.
        // 3. User is an approved SPOC for the team's institute.
        allow write: if isAdmin() || 
                      (isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.leader.uid == request.auth.uid) ||
                      (isSignedIn() && getSelfData().role == 'spoc' && getSelfData().spocStatus == 'approved' && getSelfData().institute == get(/databases/$(database)/documents/teams/$(teamId)).data.institute);
                      
        allow create: if isSignedIn();
    }
    
    match /problemStatements/{psId} {
        // Anyone can read problem statements.
        allow read: if true;
        
        // Only Admins can create, update, or delete them.
        allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
        // Anyone can read announcements.
        allow read: if true;
        
        // Only Admins can create or delete them.
        allow write: if isAdmin();
    }
    
     match /teamInvites/{inviteId} {
        // Anyone with the link can read the invite details.
        allow read: if true;
        
        // Team leaders and SPOCs can create invites. Admins can manage them.
        allow write: if isAdmin() || isSignedIn();
    }
    
    match /config/{docId} {
        // Anyone can read config like deadlines.
        allow read: if true;
        
        // Only Admins can write to config.
        allow write: if isAdmin();
    }

    match /notifications/{notificationId} {
        // User can only read their own notifications.
        allow read, delete: if isOwner(get(/databases/$(database)/documents/notifications/$(notificationId)).data.recipientUid);
        
        // Allow write for server-side operations (e.g. cloud functions)
        allow create: if isSignedIn(); 
    }
  }
}
