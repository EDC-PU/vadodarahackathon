rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Allow public read for specific configuration and problem statements
    match /config/{docId} {
      allow read: if true;
    }

    match /problemStatements/{statementId} {
      allow read: if true;
    }

    match /institutes/{instituteId} {
      allow read: if true;
    }

    match /departments/{departmentId} {
        allow read: if true;
    }

    // Users can read their own profile, admins and SPOCs can also read profiles within their institute
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId 
        || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' 
        || (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'spoc' 
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == resource.data.institute));
      allow update, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Team invitations can be read by the invited user
    match /teamInvites/{inviteId} {
      allow read: if request.auth != null;
    }

    // Team documents can be read by their members or an admin/SPOC
    match /teams/{teamId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.leader.uid 
        || resource.data.members.exists(member, member.uid == request.auth.uid)
        || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
        || (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'spoc'
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == resource.data.institute)
      );
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.leader.uid
        || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
        || (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'spoc'
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == resource.data.institute)
      );
    }
    
    // Announcements can be read by anyone, but only written by admins/spocs
    match /announcements/{announcementId} {
        allow read: if true;
        allow create, delete: if request.auth != null && (
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
            || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'spoc'
        );
    }

    // Notifications can only be accessed by the recipient
    match /notifications/{notificationId} {
        allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.recipientUid;
        allow create: if request.auth != null;
    }

    // Admins have super access
    match /{document=**} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
