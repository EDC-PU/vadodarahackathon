rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      // Check if the user document exists and has the 'admin' role.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isSpoc() {
        return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'spoc';
    }

    function isLeader(teamId) {
        return exists(/databases/$(database)/documents/teams/$(teamId)) &&
               get(/databases/$(database)/documents/teams/$(teamId)).data.leader.uid == request.auth.uid;
    }

    // Users collection rules
    match /users/{userId} {
      // Allow document creation only if the user is creating their own document.
      // This is crucial for both email/password and Google Sign-In registration.
      allow create: if isSignedIn() && isOwner(userId);
      
      // Users can read their own data.
      // Admins and SPOCs can read any user's data for management purposes.
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin() || isSpoc());
      
      // Users can only update their own profile.
      // Admins can update any user's data.
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      
      // Only admins can delete users.
      allow delete: if isSignedIn() && isAdmin();
    }

    // Teams collection rules
    match /teams/{teamId} {
        // Any signed-in user can create a new team. The logic in the app ensures they become the leader.
        allow create: if isSignedIn();

        // Any signed-in user can read public team data.
        allow read: if isSignedIn();

        // Only the team leader, an admin, or a SPOC from the same institute can update the team.
        allow update: if isSignedIn() && (isLeader(teamId) || isAdmin() || (isSpoc() && get(/databases/$(database)/documents/teams/$(teamId)).data.institute == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute));

        // Only the team leader or an admin can delete a team.
        allow delete: if isSignedIn() && (isLeader(teamId) || isAdmin());
    }
  }
}
