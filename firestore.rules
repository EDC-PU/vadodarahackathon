rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin or an approved SPOC.
    function isSuperUser() {
      // Check if the user document exists before trying to access its data.
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      if (!userDoc.exists()) {
        return false;
      }
      let userRole = userDoc.data.role;
      return userRole == 'admin' || (userRole == 'spoc' && userDoc.data.spocStatus == 'approved');
    }

    // Helper function to check if the user is the owner of a document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if a user is a member of a specific team
    function isTeamMember(teamId) {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return user.teamId == teamId;
    }
    
    // Helper function to check if a user is a leader of a specific team
    function isTeamLeader(teamId) {
        let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
        return request.auth.uid == team.leader.uid;
    }

    // Helper function to check if a user is the SPOC for a team's institute
    function isInstituteSpocForTeam(teamId) {
        let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
        let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return user.role == 'spoc' && user.institute == team.institute && user.spocStatus == 'approved';
    }
    
    // Helper function to check if a user from a team's institute is an approved SPOC
    function isUsersSpoc(userId) {
      let user = get(/databases/$(database)/documents/users/$(userId)).data;
      let requestor = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      
      // A SPOC can update a user's record if that user is in their institute
      return requestor.role == 'spoc' &&
             requestor.spocStatus == 'approved' &&
             requestor.institute == user.institute;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isSuperUser() || isOwner(userId);
      // Allow user to write to their own doc, or if the requestor is the user's approved SPOC
      allow write: if isSuperUser() || isOwner(userId) || isUsersSpoc(userId);
      
      // Explicitly allow any authenticated user to query for existing SPOCs during registration.
      // This is the key fix.
      allow list: if request.auth != null &&
                     request.query.keys().hasAll(['institute', 'role', 'spocStatus']) &&
                     request.query.get('role') == 'spoc' &&
                     request.query.get('spocStatus') == 'approved';
    }
    
    // Teams Collection
    match /teams/{teamId} {
      allow read: if isSuperUser() || isTeamMember(teamId) || isInstituteSpocForTeam(teamId);
      allow create: if request.auth != null; // Checked in flow logic
      allow update: if isSuperUser() || isTeamLeader(teamId) || isInstituteSpocForTeam(teamId);
      allow delete: if isSuperUser() || isInstituteSpocForTeam(teamId);
    }

    // Team Invites Collection (for joining via link)
    match /teamInvites/{inviteId} {
        allow read: if request.auth != null;
        allow write: if isSuperUser() || isTeamLeader(request.resource.data.teamId);
    }
    
    // Problem Statements Collection
    match /problemStatements/{psId} {
      allow read: if request.auth != null;
      allow write: if isSuperUser();
    }
    
    // Config Collection (for event settings)
    match /config/{configId} {
        allow read: if true; // Publicly readable for registration deadline
        allow write: if isSuperUser();
    }
    
    // Announcements Collection
    match /announcements/{announcementId} {
      allow read: if true; // Publicly readable
      allow write: if isSuperUser();
    }

    // Notifications Collection
    match /notifications/{notificationId} {
      allow read, write: if isSuperUser() || isOwner(request.resource.data.recipientUid);
      allow create: if request.auth != null; // Checked in flow
    }
    
    // Healthchecks collection (for system health check)
    match /healthchecks/{docId} {
        allow read, write: if isSuperUser();
    }
  }
}