rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isRole(role) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isAdmin() {
      return isRole('admin');
    }
    
    function isSpoc() {
      return isRole('spoc');
    }
    
    function isLeader() {
        return isRole('leader');
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isSpocForInstitute(institute) {
       return isSpoc() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == institute;
    }
    
    function isMemberOf(teamId) {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId;
    }

    // Users Collection
    match /users/{userId} {
      // Anyone can create their own user document during signup
      allow create: if isSignedIn();
      
      // Users can read their own document. Admins/SPOCs can read any.
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin() || isSpoc());
      
      // A user can update their own profile.
      // An admin can update any profile.
      // A SPOC can update a user from their own institute.
      allow update: if isSignedIn() && (
        isOwner(userId) ||
        isAdmin() ||
        (isSpocForInstitute(resource.data.institute))
      );
      
      // Admins can delete any user.
      // Users can delete their own account.
      allow delete: if isAdmin() || isOwner(userId);
    }
    
    // Teams Collection
    match /teams/{teamId} {
        // Only signed-in users can read team data
        allow read: if isSignedIn();
        
        // Creating a team is handled by a Genkit flow, so this is a safeguard.
        allow create: if isLeader();

        // An update is allowed if:
        // 1. The user is a member of the team (e.g. the leader).
        // 2. The user is an admin or a SPOC for that team's institute.
        // 3. A new member is being added to the team, and that new member is the one making the request.
        allow update: if isSignedIn() && (
            isMemberOf(teamId) ||
            isAdmin() || 
            isSpocForInstitute(resource.data.institute) ||
            (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
             request.resource.data.members.size() == resource.data.members.size() + 1 &&
             request.auth.uid in request.resource.data.members)
        );

        // Only admins or the institute's SPOC can delete a team
        allow delete: if isSignedIn() && (isAdmin() || isSpocForInstitute(resource.data.institute));
    }
    
    // Team Invites Collection (Permanent Links)
    match /teamInvites/{inviteId} {
        // Anyone with the link can read the invite details
        allow read: if true;
        
        // Only team leaders, SPOCs, or admins can create/update invites (via flows)
        allow write: if isSignedIn() && (isLeader() || isSpoc() || isAdmin());
    }

    // Problem Statements
    match /problemStatements/{psId} {
        allow read: if isSignedIn();
        allow write: if isRole('admin');
    }
    
    // Config Collection (e.g., for event settings)
    match /config/{docId} {
        // Everyone can read the configuration
        allow read: if true;
        
        // Only admins can change the configuration
        allow write: if isAdmin();
    }
    
    // Announcements Collection
    match /announcements/{announcementId} {
        // Everyone can read announcements
        allow read: if true;
        
        // Only admins and SPOCs (for their institute) can create/delete
        allow create: if isAdmin() || (isSpoc() && request.resource.data.institute == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute);
        allow delete: if isAdmin() || isSpoc();
    }

    // Notifications Collection
    match /notifications/{notificationId} {
        // Users can read and update (mark as read) their own notifications
        allow read, update: if isSignedIn() && resource.data.recipientUid == request.auth.uid;
        // Creation is handled by server-side flows
        allow create: if isSignedIn(); 
    }

    // Institutes Collection
    match /institutes/{instituteId} {
        // All users (including unauthenticated ones for registration) can read the list of institutes
        allow read: if true;
        // Only admins can create, update, or delete institutes
        allow write: if isAdmin();
    }

    // Departments Collection
    match /departments/{instituteName} {
        // All users (including unauthenticated ones for registration) can read department lists
        allow read: if true;
        // Admins can write to any department list
        // SPOCs can write to their own institute's department list
        allow write: if isAdmin() || isSpocForInstitute(instituteName);
    }
  }
}