rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ===== HELPER FUNCTIONS =====

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isTeamMate(userId) {
        let requestingUserTeamId = getUserData().teamId;
        let targetUserTeamId = get(/databases/$(database)/documents/users/$(userId)).data.teamId;
        // Check if both users have a teamId and if those teamIds are the same.
        return requestingUserTeamId != null && requestingUserTeamId == targetUserTeamId;
    }

    function isAdmin() {
      return isSignedIn() && getUserData().role == 'admin';
    }

    function isTeamMember(teamId) {
      return isSignedIn() && getUserData().teamId == teamId;
    }
    
    function isTeamLeader(teamId) {
      let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
      return isSignedIn() && request.auth.uid == team.leader.uid;
    }

    function isApprovedSpocForInstitute(institute) {
        let user = getUserData();
        return isSignedIn() && user.role == 'spoc' && user.spocStatus == 'approved' && user.institute == institute;
    }

    function isSpocForTeam(teamId) {
      let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
      return isApprovedSpocForInstitute(team.institute);
    }

    // ===== COLLECTION RULES =====

    // Users Collection
    match /users/{userId} {
      // Admins, profile owners, teammates, and institute SPOCs can read profiles.
      allow read: if isAdmin() || isOwner(userId) || isTeamMate(userId) || isApprovedSpocForInstitute(get(/databases/$(database)/documents/users/$(userId)).data.institute);
      
      // Admins can write to any profile. Users can write to their own profile.
      // SPOCs can update a user's profile if they are from the same institute.
      allow write: if isAdmin() || isOwner(userId) || isApprovedSpocForInstitute(get(/databases/$(database)/documents/users/$(userId)).data.institute);
      
      // Allow specific queries
      allow list: if isAdmin() || (isSignedIn() && request.query.resource.data.institute == getUserData().institute && isApprovedSpocForInstitute(getUserData().institute)) || (isSignedIn() && request.query.where.size() == 1 && 'uid' in request.query.where && request.query.where.uid == request.auth.uid);
    }
    
    // Teams Collection
    match /teams/{teamId} {
      // Admins, team members, and the institute's SPOC can read team data.
      allow read: if isAdmin() || isTeamMember(teamId) || isSpocForTeam(teamId);
      
      // Any signed-in user can create a team. The flow ensures only leaders do this.
      allow create: if isSignedIn();
      
      // Admins, team leaders, and the institute's SPOC can update team data.
      allow update: if isAdmin() || isTeamLeader(teamId) || isSpocForTeam(teamId);
      
      // Admins and the institute's SPOC can delete a team.
      allow delete: if isAdmin() || isSpocForTeam(teamId);
    }

    // Team Invites Collection (for permanent join links)
    match /teamInvites/{inviteId} {
        // Anyone can read an invite to get team details for the join page.
        allow read: if true;
        // Team leaders can create/write their own team's invite. Admins/SPOCs can manage any.
        allow write: if isAdmin() || isTeamLeader(request.resource.data.teamId) || isApprovedSpocForInstitute(get(/databases/$(database)/documents/teams/$(request.resource.data.teamId)).data.institute);
    }
    
    // Problem Statements Collection
    match /problemStatements/{psId} {
      // Any signed-in user can read problem statements.
      allow read: if isSignedIn();
      // Only admins can create, update, or delete problem statements.
      allow write: if isAdmin();
    }
    
    // Config Collection (for event settings like deadlines)
    match /config/{configId} {
        // Publicly readable for all users (e.g., to check registration deadline).
        allow read: if true;
        // Only admins can change settings.
        allow write: if isAdmin();
    }
    
    // Announcements Collection
    match /announcements/{announcementId} {
      // Publicly readable for landing page and dashboards.
      allow read: if true;
      // Only admins can post or delete announcements.
      allow write: if isAdmin();
    }

    // Notifications Collection (for team join/invite notifications)
    match /notifications/{notificationId} {
      // Users can only read/write notifications intended for them.
      allow read, write, delete: if isOwner(request.resource.data.recipientUid);
      // Creating a notification is handled by backend flows, but rule requires user to be signed in.
      allow create: if isSignedIn();
      // Allow listing for a user's own notifications
      allow list: if isSignedIn() && request.query.where.recipientUid == request.auth.uid;
    }
    
    // Healthchecks Collection (for system health check tool)
    match /healthchecks/{docId} {
        // Only allow admins to read/write health check documents.
        allow read, write: if isAdmin();
    }
  }
}
