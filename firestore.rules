
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has an admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if a user is the SPOC for a given institute
    function isSpocForInstitute(instituteName) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'spoc' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == instituteName;
    }
    
    // Helper function to check if a user is the leader of a given team
    function isLeaderOfTeam(teamId) {
        return exists(/databases/$(database)/documents/teams/$(teamId)) &&
               get(/databases/$(database)/documents/teams/$(teamId)).data.leader.uid == request.auth.uid;
    }
    
    // Helper function to check if a user is a member of a given team
    function isMemberOfTeam(teamId) {
       return exists(/databases/$(database)/documents/teams/$(teamId)) &&
              (
                get(/databases/$(database)/documents/teams/$(teamId)).data.leader.uid == request.auth.uid ||
                request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.members.map(m => m.uid)
              );
    }
    
    // Users can be read by anyone, but only the user themselves or an admin can write.
    match /users/{userId} {
      allow read; // Allow public read for profiles
      allow create: if request.auth.uid == userId; // Allow user to create their own profile
      allow update: if request.auth.uid == userId || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Teams can be read by anyone, but writes are restricted.
    match /teams/{teamId} {
      allow read; // Allow public read for stats
      allow create: if request.auth != null; // Any authenticated user can create a team initially
      allow update: if isAdmin() || isSpocForInstitute(resource.data.institute) || isLeaderOfTeam(teamId);
      allow delete: if isAdmin() || isSpocForInstitute(resource.data.institute);
    }
    
    // Announcements: Can be read by anyone, written only by admin/spoc
    match /announcements/{docId} {
      allow read;
      allow create: if isAdmin() || isSpocForInstitute(request.resource.data.institute);
      allow update, delete: if isAdmin() || isSpocForInstitute(resource.data.institute);
    }
    
    // Problem Statements: Can be read by anyone, written only by admin.
    match /problemStatements/{docId} {
      allow read;
      allow create, update, delete: if isAdmin();
    }

    // Team Invites: Read-only for lookup, writable by leader/spoc/admin
    match /teamInvites/{inviteId} {
      allow read;
      allow create: if request.auth != null; // Anyone can trigger creation through a flow
      allow update, delete: if isAdmin();
    }
    
    // Institutes list can be read by anyone, only managed by admin
    match /institutes/{docId} {
      allow read;
      allow create, update, delete: if isAdmin();
    }
    
    // Departments list can be read by anyone, only managed by spoc/admin
    match /departments/{docId} {
        allow read;
        allow create, update, delete: if isAdmin() || isSpocForInstitute(resource.data.name);
    }

    // Config can be read by anyone, only managed by admin
    match /config/{docId} {
        allow read;
        allow create, update, delete: if isAdmin();
    }
    
     // Notifications are private to the recipient or an admin
    match /notifications/{docId} {
      allow read: if request.auth.uid == resource.data.recipientUid || isAdmin();
      allow create: if request.auth != null; // Any authenticated user can trigger a notification via a flow
      allow update: if request.auth.uid == resource.data.recipientUid || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Logs are write-only for authenticated users (via flows), and read-only for admins.
    match /logs/{docId} {
        allow read: if isAdmin();
        allow write: if request.auth != null;
    }

    // Healthchecks collection for system health flow
    match /healthchecks/{docId} {
        allow read, write: if isAdmin();
    }
  }
}
