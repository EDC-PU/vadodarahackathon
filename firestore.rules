
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a specific role
    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Helper function to check if user is an admin
    function isAdmin() {
      return isRole('admin');
    }

    // Helper function to check if user is a SPOC
    function isSpoc() {
      return isRole('spoc');
    }

    // Helper function to check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Rules for users
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || isAdmin() || (isSpoc() && get(/databases/$(database)/documents/users/$(userId)).data.institute == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute);
      allow delete: if isAdmin();
    }

    // Rules for teams
    match /teams/{teamId} {
      allow read: if isSignedIn();
      allow create: if request.auth.uid == request.resource.data.leader.uid;
      allow update: if isAdmin() || (isSpoc() && resource.data.institute == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute) || request.auth.uid == resource.data.leader.uid;
      allow delete: if isAdmin() || (isSpoc() && resource.data.institute == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute);
    }
    
    // Rules for problem statements
    match /problemStatements/{psId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    // Rules for announcements
    match /announcements/{announcementId} {
        allow read: if isSignedIn();
        // Allow write if user is admin OR if user is a SPOC and the announcement is for their institute
        allow write: if isAdmin() || (isSpoc() && request.resource.data.institute == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute);
    }
    
    // Rules for event configuration
    match /config/{configId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    // Rules for permanent team invites (join links)
    match /teamInvites/{inviteId} {
        allow read: if isSignedIn();
        allow create: if isRole('leader') || isSpoc() || isAdmin();
        allow write: if isRole('leader') || isSpoc() || isAdmin();
    }
    
    // Rules for notifications
    match /notifications/{notificationId} {
        allow read, delete: if request.auth.uid == resource.data.recipientUid;
        allow create: if isSignedIn();
        allow update(writeFields: ['read']): if request.auth.uid == resource.data.recipientUid;
    }

    // Rules for institutes list
    match /institutes/{instituteId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Rules for departments list
    match /departments/{instituteName} {
      allow read: if isSignedIn();
      // Allow write if user is an admin OR if they are a SPOC for that specific institute
      allow write: if isAdmin() || (isSpoc() && instituteName == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute);
    }
  }
}
