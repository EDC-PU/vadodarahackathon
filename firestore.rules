rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is a SPOC
    function isSpoc() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'spoc';
    }
    
    // Helper function to get user data
    function getUser(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Helper function to check if a user is a leader of a specific team
    function isTeamLeader(teamId) {
      return exists(/databases/$(database)/documents/teams/$(teamId)) &&
             get(/databases/$(database)/documents/teams/$(teamId)).data.leader.uid == request.auth.uid;
    }

    // Helper function to check if a user is a member of a specific team
    function isTeamMember(teamId) {
      let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
      return request.auth.uid == team.leader.uid || request.auth.uid in team.members.map(m => m.uid);
    }

    // Users collection rules
    match /users/{userId} {
      // Allow anyone to create their own user document upon registration.
      allow create: if request.auth.uid == userId;

      // Only the authenticated user or an admin can read the user's profile.
      allow get: if request.auth.uid == userId || isAdmin();

      // The user can update their own profile, but cannot change their role or teamId.
      // Admins can update any profile.
      allow update: if (request.auth.uid == userId && request.resource.data.role == resource.data.role && request.resource.data.teamId == resource.data.teamId) || isAdmin();
      
      // Only admins can delete users.
      allow delete: if isAdmin();
    }

    // Teams collection rules
    match /teams/{teamId} {
      // An authenticated user can create a team. The leader's UID must be their own.
      allow create: if request.auth.uid != null && request.resource.data.leader.uid == request.auth.uid;

      // Team members, SPOCs of the same institute, or admins can read team data.
      allow get: if isTeamMember(teamId) || 
                   (isSpoc() && getUser(request.auth.uid).institute == resource.data.institute) || 
                   isAdmin();
                   
      // Only the team leader or an admin can update the team details.
      allow update: if isTeamLeader(teamId) || isAdmin();
      
      // Only admins can delete teams.
      allow delete: if isAdmin();
    }
    
    // Deny all access to other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
