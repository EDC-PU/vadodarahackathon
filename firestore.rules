rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isTeamMember(teamId) {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return user.teamId == teamId;
    }
    
    function isTeamLeader(teamId) {
        let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
        return request.auth.uid == team.leader.uid;
    }

    function isInstituteSpocForTeam(teamId) {
        let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
        let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return user.role == 'spoc' && user.institute == team.institute && user.spocStatus == 'approved';
    }
    
    function isSpocForUser(userId) {
      let user = get(/databases/$(database)/documents/users/$(userId)).data;
      let spoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return spoc.role == 'spoc' && spoc.institute == user.institute && spoc.spocStatus == 'approved';
    }

    // USERS COLLECTION
    match /users/{userId} {
      // Admins can read any user profile. Users can read their own profile.
      allow read: if isAdmin() || isOwner(userId);
      
      // Admins can write to any profile. Users can write to their own.
      // SPOCs can write to a user's profile if that user belongs to a team in their institute.
      allow write: if isAdmin() || isOwner(userId) || isSpocForUser(userId);

      // This is the critical rule:
      // Allow any authenticated user to perform the specific query needed
      // by the "Complete SPOC Profile" form to check for existing SPOCs.
      allow list: if request.auth != null && 
                     request.query.resource.data.role == 'spoc' &&
                     request.query.resource.data.spocStatus == 'approved';
    }

    // TEAMS COLLECTION
    match /teams/{teamId} {
      allow read: if isAdmin() || isTeamMember(teamId) || isInstituteSpocForTeam(teamId);
      allow create: if request.auth != null; // Team creation logic is handled in the backend flow
      allow update: if isAdmin() || isTeamLeader(teamId) || isInstituteSpocForTeam(teamId);
      allow delete: if isAdmin() || isInstituteSpocForTeam(teamId);
    }

    // TEAM INVITES COLLECTION (for joining via link)
    match /teamInvites/{inviteId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update, delete: if isAdmin() || isTeamLeader(get(/databases/$(database)/documents/teamInvites/$(inviteId)).data.teamId);
    }
    
    // PROBLEM STATEMENTS COLLECTION
    match /problemStatements/{psId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // CONFIG COLLECTION (for event settings like registration deadline)
    match /config/{configId} {
        allow read: if true; // Publicly readable
        allow write: if isAdmin();
    }
    
    // ANNOUNCEMENTS COLLECTION
    match /announcements/{announcementId} {
      allow read: if true; // Publicly readable
      allow write: if isAdmin();
    }

    // NOTIFICATIONS COLLECTION
    match /notifications/{notificationId} {
      allow read, write: if isOwner(get(/databases/$(database)/documents/notifications/$(notificationId)).data.recipientUid);
      allow create: if request.auth != null; // Further validation in backend flow
    }
    
    // HEALTHCHECKS COLLECTION (for system health check)
    match /healthchecks/{docId} {
        allow read, write: if isAdmin();
    }
  }
}
