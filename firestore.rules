
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is a SPOC
    function isSpoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'spoc';
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Admins can read/write anything
    match /{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Users can be read by any authenticated user, but only updated by the owner.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      // Delete is disallowed for now to prevent orphaned data. Can be handled by admin functions.
      allow delete: if false; 
    }
    
    // Teams can be read by any authenticated user.
    // Create/Update/Delete rules are more specific.
    match /teams/{teamId} {
      allow read: if request.auth != null;
      
      // Team leader can create their own team
      allow create: if request.auth.uid == request.resource.data.leader.uid;
      
      // Team leader can update team details (e.g. invite members, change problem statement)
      allow update: if request.auth.uid == resource.data.leader.uid
      						|| (isSpoc() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == resource.data.institute);
      
      // Team leader or SPOC of the same institute can delete the team
      allow delete: if request.auth.uid == resource.data.leader.uid 
      						|| (isSpoc() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == resource.data.institute);
    }
    
    // Config can be read by anyone, but only written by admins.
    match /config/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Announcements can be read by anyone, written by admins.
    match /announcements/{announcementId} {
        allow read: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
    
    // Problem Statements can be read by anyone, written by admins.
    match /problemStatements/{psId} {
        allow read: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
    
    // Health check collection is writable by admin for tests
    match /__healthchecks__/{docId} {
      allow read, write, delete: if isAdmin();
    }
  }
}
