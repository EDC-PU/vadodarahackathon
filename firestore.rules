rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions //
    
    // Is the user authenticated?
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Is the user's role 'admin'?
    // This function allows admins to bypass other rules.
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Is the user the owner of the document?
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Is the user a SPOC for a given institute?
    function isSpoc(institute) {
        return isAuthenticated() && 
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'spoc' &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == institute;
    }
    
    // Is the user a leader of a specific team?
    function isLeader(teamId) {
      return isAuthenticated() && get(/databases/$(database)/documents/teams/$(teamId)).data.leader.uid == request.auth.uid;
    }

    // Is the user a member of a specific team?
    function isMember(teamId) {
      let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
      return isAuthenticated() && 
             (team.leader.uid == request.auth.uid || request.auth.uid in team.members.map(member => member.uid));
    }


    // Collection Rules //

    // Users Collection
    // - Admins can read/write any profile.
    // - Authenticated users can read any profile (for team pages, etc.).
    // - Users can only create and update their own profile.
    match /users/{userId} {
      allow read: if isAuthenticated() || isAdmin();
      allow create: if isUser(userId);
      allow update: if isUser(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Teams Collection
    // - Admins can read/write any team.
    // - SPOCs can manage teams from their own institute.
    // - Team members can read their own team data.
    // - Only team leaders can update team data (like changing name).
    match /teams/{teamId} {
      allow read: if isMember(teamId) || isSpoc(resource.data.institute) || isAdmin();
      allow create: if isLeader(teamId);
      allow update: if isLeader(teamId) || isSpoc(resource.data.institute) || isAdmin();
      allow delete: if isSpoc(resource.data.institute) || isAdmin();
    }
    
    // Team Invites Collection (for permanent team invite links)
    // - Admins and Leaders can create/read invites.
    // - Anyone can read an invite (to get team info on join page).
    match /teamInvites/{inviteId} {
        allow read; // Publicly readable to allow joining
        allow create: if isAuthenticated(); // Leaders/Admins create these via backend
        allow update, delete: if isAdmin();
    }
    
    // Notifications Collection
    // - A user can only read/update their own notifications.
    // - Anyone authenticated can create notifications (since a user joining a team creates one for the leader).
    match /notifications/{notificationId} {
      allow read, update: if isUser(resource.data.recipientUid) || isAdmin();
      allow create: if isAuthenticated();
      allow delete: if isUser(resource.data.recipientUid) || isAdmin();
    }

    // Problem Statements Collection
    // - Publicly readable for all users to see.
    // - Only admins can create, update, or delete statements.
    match /problemStatements/{psId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Config Collection (for event settings like deadlines)
    // - Publicly readable.
    // - Only admins can change settings.
    match /config/{configId} {
      allow read;
      allow write: if isAdmin();
    }

    // Announcements Collection
    // - Publicly readable for all users to see.
    // - Only admins can create, update, or delete them.
    match /announcements/{announcementId} {
        allow read;
        allow create, update, delete: if isAdmin();
    }
    
    // Healthchecks Collection (for system health dashboard)
    // - Only accessible by the backend service (implicitly handled by admin access).
    match /healthchecks/{docId} {
      allow read, write: if isAdmin();
    }
  }
}