
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user has a specific role
    function hasRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- Default Deny ---
    match /{document=**} {
      allow read, write: if false;
    }
    
    // --- Collection Rules ---

    // Users Collection
    match /users/{userId} {
      // Users can create their own profile
      allow create: if isAuthenticated();
      // Users can read their own profile, Admins can read any profile, SPOCs can read profiles from their institute
      allow read: if isOwner(userId) || hasRole('admin') || 
                  (hasRole('spoc') && get(/databases/$(database)/documents/users/$(userId)).data.institute == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute);
      // Users can update their own profile
      allow update: if isOwner(userId);
      // Only admins can delete user profiles
      allow delete: if hasRole('admin');
    }

    // Teams Collection
    match /teams/{teamId} {
        // Team leaders can create teams
        allow create: if hasRole('leader');
        // Team members, SPOCs from the same institute, and Admins can read team data
        allow read: if hasRole('admin') || 
                    (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId) ||
                    (hasRole('spoc') && resource.data.institute == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute);
        // Only the team leader can update team details
        allow update: if hasRole('admin') || resource.data.leader.uid == request.auth.uid;
        // Only the team leader or an admin can delete a team
        allow delete: if hasRole('admin') || resource.data.leader.uid == request.auth.uid;
    }

    // Invitations Collection
    match /invitations/{invitationId} {
      // Team leaders can create invitations
      allow create: if hasRole('leader');
      // The invited user can read and update (accept/reject) their own invitation.
      allow read, update: if resource.data.email == request.auth.token.email;
      // No one can delete invitations directly; they are updated to a terminal status.
      allow delete: if false;
    }

    // Problem Statements Collection
    match /problemStatements/{psId} {
      // Anyone can read problem statements
      allow read: if true;
      // Only admins can create, update, or delete them
      allow write: if hasRole('admin');
    }
    
    // Announcements Collection
    match /announcements/{announcementId} {
      // Anyone can read announcements
      allow read: if true;
      // Only admins can create, update, or delete them
      allow write: if hasRole('admin');
    }
    
    // Configuration Collection
    match /config/{configId} {
      // Anyone can read configuration
      allow read: if true;
      // Only admins can write configuration
      allow write: if hasRole('admin');
    }
  }
}
