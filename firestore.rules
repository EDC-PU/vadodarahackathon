rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isLeader() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'leader';
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isSpoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'spoc';
    }

    function isMember() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'member';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isSpocForInstitute(institute) {
       return isSpoc() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == institute;
    }

match /users/{userId} {
  allow create: if isSignedIn();
  allow read;
  
  // Any signed-in user can update their own profile
  allow update: if isSignedIn() && isOwner(userId) || isSpoc() || isAdmin() ;

  // Only admins can delete
  allow delete: if isAdmin() || isSpoc();
}

    
    // Teams Collection
    match /teams/{teamId} {
      allow read; 

      allow create: if isLeader();

      allow update: if isSignedIn() && (
        (isLeader() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId) || 
        (isMember() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId) ||
        isAdmin() || isMember()  ||
        isSpocForInstitute(resource.data.institute)
      );

      allow delete: if isSignedIn() && (isAdmin() || isSpocForInstitute(resource.data.institute));
    }
    
    // Team Invites Collection
    match /teamInvites/{inviteId} {
      allow read: if true;
      allow write: if isSignedIn() && (isLeader() || isSpoc() || isAdmin());
    }

    // Problem Statements
    match /problemStatements/{psId} {
        allow read: if true;  
      allow write: if isAdmin();
    }
    
    // Config Collection
    match /config/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Announcements
    match /announcements/{announcementId} {
      allow read: if true || isSpoc();
      allow create: if isAdmin() || (isSpoc() &&
        request.resource.data.institute == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute);
      allow delete: if isAdmin() || isSpoc();
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read, update: if isSignedIn() && resource.data.recipientUid == request.auth.uid;
      allow create: if isSignedIn(); 
    }

    // Institutes
    match /institutes/{instituteId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Logs are write-only for authenticated users (via flows), and read-only for admins.
    match /logs/{docId} {
        allow read: if isAdmin();
        allow write: if request.auth != null;
    }


    // Departments
    match /departments/{instituteName} {
      allow read: if true;
      allow write: if isAdmin() || isSpocForInstitute(instituteName);
    }
  }
}