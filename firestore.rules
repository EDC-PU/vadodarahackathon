
rules_version = '2';
 
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }
    
    // Helper function to check if the user is a SPOC
    function isSpoc(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'spoc';
    }
    
    // Helper function to check ownership or admin status
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check team leadership
    function isTeamLeader(teamId) {
        let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
        return request.auth.uid == team.leader.uid;
    }

    // Allow public read for specific configuration documents
    match /config/{docId} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid);
    }
    
    // Announcements can be read by anyone, but only created/deleted by admins
    match /announcements/{announcementId} {
        allow read: if true;
        allow create, delete: if isAdmin(request.auth.uid);
    }

    // Problem statements can be read by anyone, but only managed by admins
    match /problemStatements/{psId} {
        allow read: if true;
        allow create, update, delete: if isAdmin(request.auth.uid);
    }

    // Users can only manage their own profile, but admins can manage any profile
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin(request.auth.uid) || isSpoc(request.auth.uid);
      allow create: if request.auth.uid != null; // Any authenticated user can create their profile
      allow update: if isOwner(userId) || isAdmin(request.auth.uid);
    }

    match /teams/{teamId} {
        allow read: if request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.members.map(mem => mem.uid).concat([get(/databases/$(database)/documents/teams/$(teamId)).data.leader.uid])
                      || isSpoc(request.auth.uid) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == resource.data.institute
                      || isAdmin(request.auth.uid);
        allow create: if request.auth.uid != null; // Team leaders create teams
        allow update: if isTeamLeader(teamId) 
                      || isAdmin(request.auth.uid)
                      || (isSpoc(request.auth.uid) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == resource.data.institute);
    }

    // Default deny all other reads/writes
    match /{document=**} {
      allow read, write: if isAdmin(request.auth.uid);
    }
  }
}
