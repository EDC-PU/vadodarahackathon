
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isSpoc() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'spoc';
    }

    function isJury() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'jury';
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isTeamLeader(teamId) {
        let teamData = get(/databases/$(database)/documents/teams/$(teamId)).data;
        return teamData.leader.uid == request.auth.uid;
    }
    
    function isTeamMember(teamId) {
        let teamData = get(/databases/$(database)/documents/teams/$(teamId)).data;
        return request.auth.uid in teamData.members;
    }

    function isSpocForTeam(teamId) {
        let teamData = get(/databases/$(database)/documents/teams/$(teamId)).data;
        let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return userData.role == 'spoc' && userData.institute == teamData.institute;
    }
    
    function isJuryForTeam(teamId) {
        let teamData = get(/databases/$(database)/documents/teams/$(teamId)).data;
        let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return userData.role == 'jury' && teamData.panelId == userData.panelId;
    }

    // Rules
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    match /teams/{teamId} {
      allow read: if isSignedIn();
      allow create: if isOwner(request.resource.data.leader.uid) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == null;
      allow update: if isAdmin() || isSpocForTeam(teamId) || isTeamLeader(teamId);
      allow delete: if isAdmin() || isSpocForTeam(teamId);
    }
    
    match /problemStatements/{psId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    match /institutes/{instId} {
        allow read: if isSignedIn();
        allow create, delete: if isAdmin();
        allow update: if isAdmin() || (isSpoc() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == resource.data.name);
    }

    match /departments/{deptId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin() || isSpoc();
    }

    match /config/{configId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /announcements/{announcementId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin() || isSpoc();
    }

    match /notifications/{notificationId} {
        allow read, write: if isSignedIn(); // Simplified for now
    }

    match /logs/{logId} {
        allow read: if isAdmin();
        allow create: if true; // Allow system to log events
    }
    
    match /teamInvites/{inviteId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // Should not be updated or deleted by clients
    }
    
    match /juryPanels/{panelId} {
      allow read: if isAdmin() || isJury();
      allow create, update, delete: if isAdmin();
    }
  }
}
