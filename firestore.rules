rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }
    
    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }
    
    function isRole(role) {
      return isSignedIn() && getUserData(request.auth.uid).role == role;
    }

    function isAdmin() {
      return isRole('admin');
    }
    
    function isTeamLeader(teamId) {
       let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
       return isUser(team.leader.uid);
    }
    
    function isTeamMember(teamId) {
      let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
      let userInMembers = request.auth.uid in team.members.map(member => member.uid);
      return isTeamLeader(teamId) || userInMembers;
    }

    function isSpocForTeam(teamId) {
        let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
        let spocData = getUserData(request.auth.uid);
        return spocData.role == 'spoc' && spocData.institute == team.institute;
    }

    // Collection Rules

    match /users/{userId} {
      // Any authenticated user can get another user's profile (for SPOC details, etc.)
      allow get: if isSignedIn();
      // A user can list their own profile, admins can list all
      allow list: if isUser(userId) || isAdmin();
      // A user can only create their own profile document
      allow create: if isUser(userId);
      // A user can only update their own profile document
      allow update: if isUser(userId);
      // No one can delete user profiles through the client
      allow delete: if false;
    }
    
    match /teams/{teamId} {
        // A user can read a team doc if they are a member, the institute's SPOC, or an admin
        allow read: if isSignedIn() && (isTeamMember(teamId) || isSpocForTeam(teamId) || isAdmin());
        // Only a team leader can create a team (handled by backend logic, client check is on user doc)
        allow create: if isTeamLeader(teamId);
        // Only the team leader, SPOC, or an admin can update a team
        allow update: if isSignedIn() && (isTeamLeader(teamId) || isSpocForTeam(teamId) || isAdmin());
        // Only a SPOC or admin can delete a team
        allow delete: if isSignedIn() && (isSpocForTeam(teamId) || isAdmin());
    }
    
    match /invitations/{invitationId} {
        // A user can read an invitation if it's for them, or if they are the leader of the team
        allow read: if isSignedIn() && (
                      resource.data.email == request.auth.token.email || 
                      isTeamLeader(resource.data.teamId)
                    );
        // Any signed-in user can create an invitation (specifically, team leaders)
        allow create: if isSignedIn();
        // A user can update an invitation if it's for them (to accept/reject)
        allow update: if isSignedIn() && resource.data.email == request.auth.token.email;
        // No one can delete invitations directly from the client
        allow delete: if false;
    }
    
    match /problemStatements/{statementId} {
      // Anyone authenticated can read problem statements
      allow read: if isSignedIn();
      // Only admins can write problem statements
      allow write: if isAdmin();
    }
    
    match /config/{configId} {
        // Anyone can read config (e.g., registration deadline)
        allow read: if true;
        // Only admins can write to config
        allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
        // Anyone authenticated can read announcements
        allow read: if isSignedIn();
        // Only admins can write announcements
        allow write: if isAdmin();
    }
  }
}