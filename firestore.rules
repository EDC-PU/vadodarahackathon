rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin.
    function isAdmin() {
      // Check if the user document exists and the role is 'admin'.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if the user is an approved SPOC.
    function isSpoc() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'spoc' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.spocStatus == 'approved';
    }

    // Helper function to check if the user is the owner of a document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if a user is a member of a specific team
    function isTeamMember(teamId) {
      // Ensure the user document and teamId field exist before checking.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId;
    }

    // Users Collection
    match /users/{userId} {
      // Admins and SPOCs can read/write any profile. Users can read/write their own.
      allow read, write: if isAdmin() || isSpoc() || isOwner(userId);
      
      // Allow any authenticated user to check for existing SPOCs during registration.
      allow list: if request.auth != null && 
                     'institute' in request.query &&
                     'role' in request.query &&
                     request.query.role == 'spoc';
    }
    
    // Teams Collection
    match /teams/{teamId} {
      // Admins, SPOCs, and team members can read team data.
      allow read: if isAdmin() || isSpoc() || isTeamMember(teamId);
      // Any authenticated user can create a team (logic is handled server-side).
      allow create: if request.auth != null;
      // Admins and SPOCs can update/delete any team.
      allow update, delete: if isAdmin() || isSpoc();
    }

    // Team Invites Collection (for joining via link)
    match /teamInvites/{inviteId} {
        // Any authenticated user can read an invite (to get team details).
        allow read: if request.auth != null;
        // Admins and SPOCs can create/manage invites.
        allow write: if isAdmin() || isSpoc();
    }
    
    // Problem Statements Collection
    match /problemStatements/{psId} {
      // Any authenticated user can read problem statements.
      allow read: if request.auth != null;
      // Only Admins and SPOCs can create/edit problem statements.
      allow write: if isAdmin() || isSpoc();
    }
    
    // Config Collection (for event settings)
    match /config/{configId} {
        // Publicly readable for registration deadline.
        allow read: if true; 
        // Only Admins and SPOCs can change settings.
        allow write: if isAdmin() || isSpoc();
    }
    
    // Announcements Collection
    match /announcements/{announcementId} {
      // Publicly readable.
      allow read: if true;
      // Only Admins and SPOCs can post announcements.
      allow write: if isAdmin() || isSpoc();
    }

    // Notifications Collection
    match /notifications/{notificationId} {
      // Users can only manage their own notifications.
      allow read, write, delete: if isOwner(request.resource.data.recipientUid);
      // Any authenticated user can create a notification (target is secured by the rule above).
      allow create: if request.auth != null;
    }
    
    // Healthchecks collection (for system health check)
    match /healthchecks/{docId} {
        allow read, write: if isAdmin();
    }
  }
}