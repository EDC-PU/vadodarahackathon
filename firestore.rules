rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an admin.
    // Admins have read/write access to everything.
    function isAdmin() {
      return isLoggedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if a user is authenticated.
    function isLoggedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if the requesting user is the owner of a document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone can create their own user document on signup.
      allow create: if isLoggedIn() && isOwner(userId);
      
      // Only the user themselves or an admin can read the user's profile.
      allow read: if isAdmin() || (isLoggedIn() && isOwner(userId));
      
      // Only the user themselves or an admin can update their profile.
      allow update: if isAdmin() || (isLoggedIn() && isOwner(userId));
      
      // Only admins can delete users.
      allow delete: if isAdmin();
    }
    
    // Rules for the 'teams' collection
    match /teams/{teamId} {
      // Any logged-in user can read team data (needed for member dashboards).
      allow read: if isLoggedIn();
      
      // Create: Only a logged-in user can create a team. The 'leader' must be the one creating it.
      allow create: if isLoggedIn() && request.resource.data.leader.uid == request.auth.uid;
      
      // Update: Only the team leader or an admin/spoc can update team info.
      // A SPOC can only manage teams from their own institute.
      function isSpocForTeam() {
        let spocProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return spocProfile.role == 'spoc' && spocProfile.institute == resource.data.institute;
      }
      allow update: if isLoggedIn() && (isAdmin() || isSpocForTeam() || request.auth.uid == resource.data.leader.uid);
      
      // Delete: Only the team leader, an admin, or a SPOC for that institute can delete a team.
      allow delete: if isLoggedIn() && (isAdmin() || isSpocForTeam() || request.auth.uid == resource.data.leader.uid);
    }
    
    // Rules for 'teamInvites' collection (for permanent join links)
    match /teamInvites/{inviteId} {
        // Anyone can read an invite to get team details.
        allow read: if true;
        // Only a logged-in user (specifically the leader via a flow) can create one.
        allow create: if isLoggedIn();
        // Invites are not meant to be updated or deleted by clients.
        allow update, delete: if false;
    }
    
    // Rules for 'notifications' collection
    match /notifications/{notificationId} {
        // Create: Any authenticated user can create a notification (e.g., a member joining notifies a leader).
        allow create: if isLoggedIn();
        // Read, Update: Only the recipient can read or update (e.g., mark as read) their notification.
        allow read, update: if isLoggedIn() && isOwner(resource.data.recipientUid);
        // Delete: Only the recipient can delete their notification.
        allow delete: if isLoggedIn() && isOwner(resource.data.recipientUid);
    }

    // Rules for 'problemStatements' collection
    match /problemStatements/{psId} {
      // Any logged-in user can read problem statements.
      allow read: if isLoggedIn();
      // Only admins can create, update, or delete problem statements.
      allow create, update, delete: if isAdmin();
    }
    
    // Rules for 'announcements' collection
    match /announcements/{announcementId} {
      // Anyone (even unauthenticated users) can read announcements for the landing page.
      allow read: if true;
      // Only admins can create, update, or delete announcements.
      allow create, update, delete: if isAdmin();
    }
    
    // Rules for 'config' collection (e.g., event deadlines)
    match /config/{configId} {
      // Everyone can read configuration.
      allow read: if true;
      // Only admins can write configuration.
      allow write: if isAdmin();
    }

    // Health check collection, for system health page
    match /healthchecks/{docId} {
      // Allow write access for server-side admin SDK only.
      // No client access is needed or permitted.
      allow read, write: if false;
    }
  }
}