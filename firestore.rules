rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isLeader() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'leader';
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isSpoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'spoc';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isMemberOf(teamId) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId;
    }
    
    function isSpocForInstitute(institute) {
       return isSpoc() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == institute;
    }

    function usersAreOnSameTeam(userId1, userId2) {
      let user1TeamId = get(/databases/$(database)/documents/users/$(userId1)).data.teamId;
      let user2TeamId = get(/databases/$(database)/documents/users/$(userId2)).data.teamId;
      return user1TeamId != null && user1TeamId == user2TeamId;
    }

    // Users Collection
    match /users/{userId} {
      allow create: if isSignedIn();
      
      // A user can read another user's profile if they are on the same team,
      // or if the requester is an admin or SPOC.
      allow read: if isSignedIn() && (
                    isOwner(userId) || 
                    isAdmin() || 
                    isSpoc() || 
                    usersAreOnSameTeam(request.auth.uid, userId)
                  );
      
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin() || isSpoc());
      
      allow delete: if isAdmin();
    }
    
    // Teams Collection
    match /teams/{teamId} {
        allow read: if isSignedIn();
        
        allow create: if isLeader();

        // Allow update if the user is a member of the team, an admin, or a SPOC for the institute.
        allow update: if isSignedIn() && (
                        isMemberOf(teamId) ||
                        isAdmin() || 
                        isSpocForInstitute(resource.data.institute)
                      );

        allow delete: if isSignedIn() && (isAdmin() || isSpocForInstitute(resource.data.institute));
    }
    
    // Team Invites Collection (Permanent Links)
    match /teamInvites/{inviteId} {
        allow read: if true;
        allow write: if isSignedIn() && (isLeader() || isSpoc() || isAdmin());
    }

    // Problem Statements
    match /problemStatements/{psId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    // Config Collection (e.g., for event settings)
    match /config/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Announcements Collection
    match /announcements/{announcementId} {
        allow read: if true;
        allow create: if isAdmin() || (isSpoc() && request.resource.data.institute == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute);
        allow delete: if isAdmin() || isSpoc();
    }

    // Notifications Collection
    match /notifications/{notificationId} {
        allow read, update: if isSignedIn() && request.resource.data.recipientUid == request.auth.uid;
        allow create: if isSignedIn(); 
    }

    // Institutes Collection
    match /institutes/{instituteId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    // Departments Collection
    match /departments/{instituteName} {
        allow read: if true;
        allow write: if isAdmin() || isSpocForInstitute(instituteName);
    }
    // Healthchecks for System Health page
    match /healthchecks/{docId} {
       allow write: if isAdmin();
    }
  }
}