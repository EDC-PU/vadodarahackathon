rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ===== HELPER FUNCTIONS =====

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isAdmin() {
      return isSignedIn() && getUserData().role == 'admin';
    }

    function isTeamMember(teamId) {
      return isSignedIn() && getUserData().teamId == teamId;
    }
    
    function isTeamLeader(teamId) {
      let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
      return isSignedIn() && request.auth.uid == team.leader.uid;
    }

    function isApprovedSpocForInstitute(institute) {
        let user = getUserData();
        return isSignedIn() && user.role == 'spoc' && user.spocStatus == 'approved' && user.institute == institute;
    }

    function isSpocForTeam(teamId) {
      let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
      return isApprovedSpocForInstitute(team.institute);
    }

    function isSpocForTeamMember(userId) {
      let user = get(/databases/$(database)/documents/users/$(userId)).data;
      return isApprovedSpocForInstitute(user.institute);
    }
    
    // ===== COLLECTION RULES =====

    match /users/{userId} {
      // Admins and the user's SPOC can read a profile. Users can read their own profile.
      allow read: if isAdmin() || isOwner(userId) || isSpocForTeamMember(userId);
      
      // Admins and the user can write to a profile. SPOCs can also write to a user's profile in their institute.
      allow write: if isAdmin() || isOwner(userId) || isSpocForTeamMember(userId);
      
      // Admins can list all users. SPOCs can list users from their institute.
      // Any user can query for their own profile by UID.
      allow list: if isAdmin() 
                  || (request.query.resource.data.institute == getUserData().institute && isApprovedSpocForInstitute(getUserData().institute))
                  || (request.query.resource.data.uid == request.auth.uid && isSignedIn());
    }
    
    match /teams/{teamId} {
      // Admins, team members, and the institute's SPOC can read team data.
      allow read: if isAdmin() || isTeamMember(teamId) || isSpocForTeam(teamId);
      
      // Any signed-in user can create a team. The flow ensures only leaders do this.
      allow create: if isSignedIn();
      
      // Admins, team leaders, and the institute's SPOC can update team data.
      allow update: if isAdmin() || isTeamLeader(teamId) || isSpocForTeam(teamId);
      
      // Admins and the institute's SPOC can delete a team.
      allow delete: if isAdmin() || isSpocForTeam(teamId);
      
      // Allow SPOCs to query for teams within their institute.
      allow list: if isApprovedSpocForInstitute(request.query.resource.data.institute);
    }

    match /teamInvites/{inviteId} {
        // Any signed-in user can read an invite to get team details.
        allow read: if isSignedIn();
        // Team leaders can create/write their own team's invite. Admins can manage any.
        allow write: if isAdmin() || isTeamLeader(request.resource.data.teamId);
    }
    
    match /problemStatements/{psId} {
      // Any signed-in user can read problem statements.
      allow read: if isSignedIn();
      // Only admins can create, update, or delete problem statements.
      allow write: if isAdmin();
    }
    
    match /config/{configId} {
        // Publicly readable for all users (e.g., to check registration deadline).
        allow read: if true;
        // Only admins can change settings.
        allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      // Publicly readable for landing page and dashboards.
      allow read: if true;
      // Only admins can post or delete announcements.
      allow write: if isAdmin();
    }

    match /notifications/{notificationId} {
      // Users can only read/write notifications intended for them.
      allow read, write: if isOwner(request.resource.data.recipientUid);
      // Backend flows create notifications, but rule requires user to be signed in.
      allow create: if isSignedIn();
    }
    
    match /healthchecks/{docId} {
        // Only allow admins to read/write health check documents.
        allow read, write: if isAdmin();
    }
  }
}
