rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isSpocForInstitute(institute) {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return user.role == 'spoc' && user.spocStatus == 'approved' && user.institute == institute;
    }

    function isTeamMember(teamId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId;
    }

    // =================================
    // Collection: users
    // =================================
    match /users/{userId} {
      // Admins can do anything
      allow read, write, create, delete: if isAdmin();

      // Allow any authenticated user to query for existing spocs during registration
      allow list: if request.auth != null && request.query.keys().hasOnly(['where']) && request.query.where.keys().hasAll(['institute', 'role']);
      
      // Users can read/update their own profile
      allow read, update: if isOwner(userId);
      
      // A SPOC can update a user's teamId if they manage that user's institute
      allow update: if isSpocForInstitute(get(/databases/$(database)/documents/users/$(userId)).data.institute);
    }
    
    // =================================
    // Collection: teams
    // =================================
    match /teams/{teamId} {
        // Admins have full access
        allow read, write, delete: if isAdmin();

        // Team members can read their own team data
        allow read: if isTeamMember(teamId);

        // Team Leaders can update their team
        allow update: if isTeamMember(teamId) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'leader';

        // SPOCs can read and write teams from their institute
        allow read, write, delete: if isSpocForInstitute(resource.data.institute);
    }
    
    // =================================
    // Collection: teamInvites
    // =================================
    match /teamInvites/{inviteId} {
        // Admins and authenticated users can read invites to get team details
        allow read: if request.auth != null || isAdmin();

        // Team leaders and SPOCs can create invites for their teams
        allow create: if (isTeamMember(request.resource.data.teamId) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'leader') || isSpocForInstitute(get(/databases/$(database)/documents/teams/$(request.resource.data.teamId)).data.institute);
    }
    
    // =================================
    // Collection: problemStatements
    // =================================
    match /problemStatements/{psId} {
        // Admins can manage problem statements
        allow write, create, delete: if isAdmin();
        
        // Any authenticated user can read problem statements
        allow read, list: if request.auth != null;
    }
    
    // =================================
    // Collection: config
    // =================================
    match /config/{configId} {
        // Admins can manage configuration
        allow write: if isAdmin();
        
        // Anyone can read config (e.g., for registration deadline)
        allow read: if true;
    }

    // =================================
    // Collection: announcements
    // =================================
    match /announcements/{announcementId} {
        // Admins can manage announcements
        allow write, create, delete: if isAdmin();
        
        // Any user can read announcements intended for them
        allow read, list: if request.auth != null;
    }
    
    // =================================
    // Collection: notifications
    // =================================
    match /notifications/{notificationId} {
        // Users can manage their own notifications
        allow read, update, delete: if isOwner(resource.data.recipientUid);
        
        // System/backend can create notifications
        allow create: if true; // Or tighten this rule if needed
    }
    
    // =================================
    // Collection: healthchecks
    // =================================
    match /healthchecks/{docId} {
        // Allow write only for backend service roles (or admins) for health checks
        allow write, delete: if isAdmin(); // In a real app, this would be a service account
    }
  }
}