rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getUserData() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isRole(role) {
      return isSignedIn() && getUserData().role == role;
    }
    
    function isTeamLeader(teamId) {
        let teamData = get(/databases/$(database)/documents/teams/$(teamId)).data;
        return isUser(teamData.leader.uid);
    }
    
    function isTeamMember(teamId) {
        let teamData = get(/databases/$(database)/documents/teams/$(teamId)).data;
        return teamData.members.exists(member => member.uid == request.auth.uid) || isTeamLeader(teamId);
    }

    // Admins can do anything
    match /{document=**} {
      allow read, write: if isRole('admin');
    }
    
    // Allow public read for specific collections necessary for the landing page
    match /problemStatements/{psId} {
      allow read: if true;
    }
    
    match /institutes/{instId} {
      allow read: if true;
    }

    match /departments/{deptId} {
      allow read: if true;
    }
    
    match /logs/{logId} {
        allow read, write: if isRole('admin');
        allow create: if isSignedIn(); 
    }

    match /announcements/{announcementId} {
        // Anyone can read 'all' announcements
        allow read: if resource.data.audience == 'all'
                   // Any signed-in user can read team-wide announcements
                   || (resource.data.audience == 'teams' && isSignedIn())
                   // SPOCs can read SPOC announcements
                   || (resource.data.audience == 'spocs' && isRole('spoc'))
                   // Users can read announcements for their specific institute
                   || (resource.data.audience == 'institute' && isSignedIn() && getUserData().institute == resource.data.institute)
                   // Users on nominated teams can read nominated team announcements
                   || (resource.data.audience == 'nominated_teams' && isSignedIn() && get(/databases/$(database)/documents/teams/$(getUserData().teamId)).data.isNominated == true);

        // Admins and SPOCs (for their own institute) can create announcements
        allow create: if isRole('admin') || (isRole('spoc') && request.resource.data.institute == getUserData().institute);
        allow delete: if isRole('admin') || (isRole('spoc') && resource.data.authorName == getUserData().name);
    }
    
    match /config/{docId} {
        allow read: if true;
        allow write: if isRole('admin');
    }

    match /users/{userId} {
      // Users can read/write their own profile
      allow read, write: if isUser(userId);
      // SPOCs can read profiles of users from their institute
      allow read: if isRole('spoc') && getUserData().institute == resource.data.institute;
      // Team members can read profiles of their teammates
      allow read: if isSignedIn() && getUserData().teamId != null && getUserData().teamId == resource.data.teamId;
      // Jury members can read profiles of team members they are assigned to evaluate
      allow read: if isRole('jury') 
                  && getUserData().panelId != null 
                  && resource.data.teamId != null 
                  && get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.panelId == getUserData().panelId;
    }

    match /teams/{teamId} {
        // Allow read for members of that team, the institute's SPOC, or a jury member on the assigned panel
        allow read: if isSignedIn() && (isTeamMember(teamId) 
                    || (isRole('spoc') && getUserData().institute == resource.data.institute)
                    || (isRole('jury') && getUserData().panelId != null && resource.data.panelId == getUserData().panelId));
        
        // Allow updates by team leader, SPOC, or Admin
        allow update: if isTeamLeader(teamId) || (isRole('spoc') && getUserData().institute == resource.data.institute);
        
        // Only allow creation by a user who will be the leader
        allow create: if isUser(request.resource.data.leader.uid);
    }

    match /teamInvites/{inviteId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow delete: if isRole('admin');
    }
    
    match /notifications/{notificationId} {
        allow read, write: if isUser(resource.data.recipientUid);
        allow create: if isSignedIn();
    }
    
    match /juryPanels/{panelId} {
        allow read, write: if isRole('admin');
        allow read: if isRole('jury') && getUserData().panelId == panelId;
    }
  }
}
