rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user has a specific role
    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Helper function to check if a user is an admin
    function isAdmin() {
      return isRole('admin');
    }
    
    // Helper function to check if a user is a leader
    function isLeader() {
      return isRole('leader');
    }

    match /users/{userId} {
      // READ: Users can read their own profile. Admins can read any profile.
      allow read: if request.auth.uid == userId || isAdmin();
      
      // CREATE: Any user can create their own profile during registration.
      // Admins can create new user profiles (for SPOCs).
      allow create: if request.auth.uid == userId || isAdmin();
      
      // UPDATE: Users can update their own profile. Admins can update any profile (to make another user an admin).
      allow update: if request.auth.uid == userId || isAdmin();
      
      // DELETE: Only admins can delete users (for cleanup).
      allow delete: if isAdmin();
    }

    match /teams/{teamId} {
      // READ: Any authenticated user can read team details.
      allow read: if request.auth != null;
      
      // CREATE: Only a team leader can create a team document.
      allow create: if isLeader();
      
      // UPDATE: Only the team leader or an admin can update team details.
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId || isAdmin();
      
      // DELETE: Only admins can delete teams.
      allow delete: if isAdmin();
    }
    
    match /problemStatements/{statementId} {
      // READ: Any authenticated user can view problem statements.
      allow read: if request.auth != null;
      
      // WRITE (Create, Update, Delete): Only admins can manage problem statements.
      allow write: if isAdmin();
    }
  }
}
